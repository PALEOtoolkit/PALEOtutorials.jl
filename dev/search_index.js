var documenterSearchIndex = {"docs":
[{"location":"indexpage/#Index","page":"Index","title":"Index","text":"","category":"section"},{"location":"indexpage/","page":"Index","title":"Index","text":"","category":"page"},{"location":"collated_examples/error_examples/README/#Configuration-Errors","page":"Configuration Errors","title":"Configuration Errors","text":"","category":"section"},{"location":"collated_examples/error_examples/README/","page":"Configuration Errors","title":"Configuration Errors","text":"These examples illustrate common configuration errors, for various misconfigurations of Example 5 Isotopes and Rayleigh fractionation","category":"page"},{"location":"collated_examples/error_examples/README/#Syntax-error-in-.yaml-config-file","page":"Configuration Errors","title":"Syntax error in .yaml config file","text":"","category":"section"},{"location":"collated_examples/error_examples/README/","page":"Configuration Errors","title":"Configuration Errors","text":"The model configuration (file examples/error_examples/config_ex5_syntax_error.yaml) contains a syntax error in the .yaml config file, hence the initial parsing of the file fails.","category":"page"},{"location":"collated_examples/error_examples/README/","page":"Configuration Errors","title":"Configuration Errors","text":"import Markdown\nMarkdown.parse(\n    \"\"\"```julia\n    $(read(joinpath(ENV[\"PALEO_EXAMPLES\"], \"error_examples/config_ex5_syntax_error.yaml\"), String))\n    ```\"\"\"\n)","category":"page"},{"location":"collated_examples/error_examples/README/","page":"Configuration Errors","title":"Configuration Errors","text":"This results in an error when the file is parsed (note that the informative message indicating that there is a problem with the YAML parsing is near the top of the stack trace):","category":"page"},{"location":"collated_examples/error_examples/README/","page":"Configuration Errors","title":"Configuration Errors","text":"try # hide\n      include(joinpath(ENV[\"PALEO_EXAMPLES\"], \"error_examples/run_ex5_syntax_error.jl\"))\ncatch # hide\n      rethrow() # hide\nend # hide","category":"page"},{"location":"collated_examples/error_examples/README/#Missing-/-unlinked-Variables","page":"Configuration Errors","title":"Missing / unlinked Variables","text":"","category":"section"},{"location":"collated_examples/error_examples/README/","page":"Configuration Errors","title":"Configuration Errors","text":"The model configuration (file examples/error_examples/config_ex5_reservoir_A_missing.yaml) omits a ReactionReservoirScalar, resulting in Variable Dependencies and Contributors with no corresponding Properties and Targets.","category":"page"},{"location":"collated_examples/error_examples/README/","page":"Configuration Errors","title":"Configuration Errors","text":"import Markdown\nMarkdown.parse(\n    \"\"\"```julia\n    $(read(joinpath(ENV[\"PALEO_EXAMPLES\"], \"error_examples/config_ex5_reservoir_A_missing.yaml\"), String))\n    ```\"\"\"\n)","category":"page"},{"location":"collated_examples/error_examples/README/","page":"Configuration Errors","title":"Configuration Errors","text":"This results in an error when the Variables are linked:","category":"page"},{"location":"collated_examples/error_examples/README/","page":"Configuration Errors","title":"Configuration Errors","text":"try # hide\n      include(joinpath(ENV[\"PALEO_EXAMPLES\"], \"error_examples/run_ex5_reservoir_A_missing.jl\"))\ncatch # hide\n      rethrow() # hide\nend # hide","category":"page"},{"location":"collated_examples/error_examples/README/#A-duplicated-Variable-or-a-name-collision","page":"Configuration Errors","title":"A duplicated Variable or a name collision","text":"","category":"section"},{"location":"collated_examples/error_examples/README/","page":"Configuration Errors","title":"Configuration Errors","text":"The model configuration (file examples/error_examples/config_ex5_reservoir_A_duplicate.yaml) contains two copies of a ReactionReservoirScalar, both attempting to create the same VariableDomains","category":"page"},{"location":"collated_examples/error_examples/README/","page":"Configuration Errors","title":"Configuration Errors","text":"import Markdown\nMarkdown.parse(\n    \"\"\"```julia\n    $(read(joinpath(ENV[\"PALEO_EXAMPLES\"], \"error_examples/config_ex5_reservoir_A_duplicate.yaml\"), String))\n    ```\"\"\"\n)","category":"page"},{"location":"collated_examples/error_examples/README/","page":"Configuration Errors","title":"Configuration Errors","text":"This results in an error when the Variables are linked:","category":"page"},{"location":"collated_examples/error_examples/README/","page":"Configuration Errors","title":"Configuration Errors","text":"try # hide\n      include(joinpath(ENV[\"PALEO_EXAMPLES\"], \"error_examples/run_ex5_reservoir_A_duplicate.jl\"))\ncatch # hide\n      rethrow() # hide\nend # hide","category":"page"},{"location":"collated_examples/error_examples/README/#Mismatch-in-:field_data-Type-(eg-isotopes)-(Reservoir)","page":"Configuration Errors","title":"Mismatch in :field_data Type (eg isotopes) (Reservoir)","text":"","category":"section"},{"location":"collated_examples/error_examples/README/","page":"Configuration Errors","title":"Configuration Errors","text":"The model configuration (file examples/error_examples/config_ex5_reservoir_A_noisotope.yaml)  contains one ReactionReservoirScalar with :field_data=ScalarData where this species should have  :field_data=IsotopeLinear:","category":"page"},{"location":"collated_examples/error_examples/README/","page":"Configuration Errors","title":"Configuration Errors","text":"import Markdown\nMarkdown.parse(\n    \"\"\"```julia\n    $(read(joinpath(ENV[\"PALEO_EXAMPLES\"], \"error_examples/config_ex5_reservoir_A_noisotope.yaml\"), String))\n    ```\"\"\"\n)","category":"page"},{"location":"collated_examples/error_examples/README/","page":"Configuration Errors","title":"Configuration Errors","text":"This results in an error when the Variables are linked:","category":"page"},{"location":"collated_examples/error_examples/README/","page":"Configuration Errors","title":"Configuration Errors","text":"try # hide\n      include(joinpath(ENV[\"PALEO_EXAMPLES\"], \"error_examples/run_ex5_reservoir_A_noisotope.jl\"))\ncatch # hide\n      rethrow() # hide\nend # hide","category":"page"},{"location":"collated_examples/error_examples/README/#Mismatch-in-:field_data-Type-(eg-isotopes)-(Flux)","page":"Configuration Errors","title":"Mismatch in :field_data Type (eg isotopes) (Flux)","text":"","category":"section"},{"location":"collated_examples/error_examples/README/","page":"Configuration Errors","title":"Configuration Errors","text":"The model configuration (file examples/error_examples/config_ex5_flux_noisotope.yaml)  contains a Variable defined by a ReactionFluxTarget with default :field_data=ScalarData where this species should have  :field_data=IsotopeLinear:","category":"page"},{"location":"collated_examples/error_examples/README/","page":"Configuration Errors","title":"Configuration Errors","text":"import Markdown\nMarkdown.parse(\n    \"\"\"```julia\n    $(read(joinpath(ENV[\"PALEO_EXAMPLES\"], \"error_examples/config_ex5_flux_noisotope.yaml\"), String))\n    ```\"\"\"\n)","category":"page"},{"location":"collated_examples/error_examples/README/","page":"Configuration Errors","title":"Configuration Errors","text":"This results in an error when the Variables are linked:","category":"page"},{"location":"collated_examples/error_examples/README/","page":"Configuration Errors","title":"Configuration Errors","text":"try # hide\n      include(joinpath(ENV[\"PALEO_EXAMPLES\"], \"error_examples/run_ex5_flux_noisotope.jl\"))\ncatch # hide\n      rethrow() # hide\nend # hide","category":"page"},{"location":"ExampleInstallConfig/#Installation-and-getting-started","page":"Installation and getting started","title":"Installation and getting started","text":"","category":"section"},{"location":"ExampleInstallConfig/#Quickstart-assuming-a-working-Julia-and-VS-code-installation","page":"Installation and getting started","title":"Quickstart assuming a working Julia and VS code installation","text":"","category":"section"},{"location":"ExampleInstallConfig/","page":"Installation and getting started","title":"Installation and getting started","text":"Note  PALEO requires Julia version 1.10 or later","category":"page"},{"location":"ExampleInstallConfig/","page":"Installation and getting started","title":"Installation and getting started","text":"Clone this github repository to local directory PALEOtutorials.jl: from a VS code terminal, linux bash prompt or a Windows terminal,","category":"page"},{"location":"ExampleInstallConfig/","page":"Installation and getting started","title":"Installation and getting started","text":"$ git clone https://github.com/PALEOtoolkit/PALEOtutorials.jl","category":"page"},{"location":"ExampleInstallConfig/","page":"Installation and getting started","title":"Installation and getting started","text":"Start VS code and the julia REPL, activate the PALEOtutorials.jl/examples environement:","category":"page"},{"location":"ExampleInstallConfig/","page":"Installation and getting started","title":"Installation and getting started","text":"In VS code, right click on any file in the PALEOtutorials.jl/examples folder and select Julia: activate parent environment from the pop-up menu. ","category":"page"},{"location":"ExampleInstallConfig/","page":"Installation and getting started","title":"Installation and getting started","text":"navigate to the PALEOtutorials.jl/examples folder, and run:","category":"page"},{"location":"ExampleInstallConfig/","page":"Installation and getting started","title":"Installation and getting started","text":"julia> import Pkg\njulia> Pkg.instantiate()   # download Julia packages","category":"page"},{"location":"ExampleInstallConfig/","page":"Installation and getting started","title":"Installation and getting started","text":"Individual examples can then be run by eg","category":"page"},{"location":"ExampleInstallConfig/","page":"Installation and getting started","title":"Installation and getting started","text":"julia> cd(\"CPU\")  # PALEOtutorials.jl/examples/CPU\njulia> include(\"CPU_examples.jl\")  # run CPU model example","category":"page"},{"location":"ExampleInstallConfig/","page":"Installation and getting started","title":"Installation and getting started","text":"See the online Documentation for details.","category":"page"},{"location":"ExampleInstallConfig/#Installing-and-configuring-Julia,-VS-Code,-and-PALEOtutorials.jl","page":"Installation and getting started","title":"Installing and configuring Julia, VS Code, and PALEOtutorials.jl","text":"","category":"section"},{"location":"ExampleInstallConfig/#Install-Julia","page":"Installation and getting started","title":"Install Julia","text":"","category":"section"},{"location":"ExampleInstallConfig/","page":"Installation and getting started","title":"Installation and getting started","text":"Download and install Julia from https://julialang.org/downloads/ (PALEO requires Julia 1.10 or a later version).","category":"page"},{"location":"ExampleInstallConfig/#Install-VS-Code","page":"Installation and getting started","title":"Install VS Code","text":"","category":"section"},{"location":"ExampleInstallConfig/","page":"Installation and getting started","title":"Installation and getting started","text":"Install VS Code from https://code.visualstudio.com/download Follow instructions at https://github.com/julia-vscode/julia-vscode to install the Julia extension.","category":"page"},{"location":"ExampleInstallConfig/#Clone-the-PALEOtutorials.jl-github-repository","page":"Installation and getting started","title":"Clone the PALEOtutorials.jl github repository","text":"","category":"section"},{"location":"ExampleInstallConfig/","page":"Installation and getting started","title":"Installation and getting started","text":"This will download https://github.com/PALEOtoolkit/PALEOtutorials.jl into a new folder PALEOtutorials.jl","category":"page"},{"location":"ExampleInstallConfig/","page":"Installation and getting started","title":"Installation and getting started","text":"git clone https://github.com/PALEOtoolkit/PALEOtutorials.jl","category":"page"},{"location":"ExampleInstallConfig/#Start-a-Julia-REPL-in-VS-code","page":"Installation and getting started","title":"Start a Julia REPL in VS code","text":"","category":"section"},{"location":"ExampleInstallConfig/","page":"Installation and getting started","title":"Installation and getting started","text":"Launch VScode from the PALEOtutorials.jl folder, or use Menu->File->Open folder from inside VSCode to change to this folder.","category":"page"},{"location":"ExampleInstallConfig/","page":"Installation and getting started","title":"Installation and getting started","text":"Start Julia REPL: ","category":"page"},{"location":"ExampleInstallConfig/","page":"Installation and getting started","title":"Installation and getting started","text":"click VScode menu View -> Command Palette, search for Julia, select Julia: Start REPL ","category":"page"},{"location":"ExampleInstallConfig/#Activate-the-PALEOtutorials.jl/examples-Julia-environment-and-install-Julia-packages","page":"Installation and getting started","title":"Activate the PALEOtutorials.jl/examples Julia environment and install Julia packages","text":"","category":"section"},{"location":"ExampleInstallConfig/","page":"Installation and getting started","title":"Installation and getting started","text":"The majority of high-level Julia functionality (numerical solvers, plotting, etc) is provided by Packages. Julia uses environments defined to a Project.toml file to control the loading of Packages, which implement Modules loaded by import or using (eg import DifferentialEquations to use the DifferentialEquations package).","category":"page"},{"location":"ExampleInstallConfig/","page":"Installation and getting started","title":"Installation and getting started","text":"The environment for using PALEOtutorials.jl is defined by PALEOtutorials.jl/examples/Project.toml. This adds PALEOtoolkit packages including PALEOboxes, PALEOmodel and required dependencies.","category":"page"},{"location":"ExampleInstallConfig/","page":"Installation and getting started","title":"Installation and getting started","text":"To activate this environment:","category":"page"},{"location":"ExampleInstallConfig/","page":"Installation and getting started","title":"Installation and getting started","text":"In VS code, right click on any file in the PALEOtutorials.jl/examples folder and select Julia: activate parent environment from the pop-up menu.","category":"page"},{"location":"ExampleInstallConfig/","page":"Installation and getting started","title":"Installation and getting started","text":"Then download Julia packages: from the Julia REPL,","category":"page"},{"location":"ExampleInstallConfig/","page":"Installation and getting started","title":"Installation and getting started","text":"julia> import Pkg\njulia> Pkg.instantiate()  # one-time initialisation for a new installation","category":"page"},{"location":"ExampleInstallConfig/#Running-the-examples","page":"Installation and getting started","title":"Running the examples","text":"","category":"section"},{"location":"ExampleInstallConfig/","page":"Installation and getting started","title":"Installation and getting started","text":"Start the julia REPL inside VS code, navigate to the PALEOtutorials.jl/examples folder, and activate the correct Julia environment:","category":"page"},{"location":"ExampleInstallConfig/","page":"Installation and getting started","title":"Installation and getting started","text":"In VS code, right click on any file in the PALEOtutorials.jl/examples folder and select Julia: activate parent environment from the pop-up menu.","category":"page"},{"location":"ExampleInstallConfig/","page":"Installation and getting started","title":"Installation and getting started","text":"Individual examples can then be run by eg","category":"page"},{"location":"ExampleInstallConfig/","page":"Installation and getting started","title":"Installation and getting started","text":"julia> cd(\"CPU\")  # PALEOtutorials.jl/examples/CPU\njulia> include(\"CPU_examples.jl\")  # run CPU model example","category":"page"},{"location":"ExampleInstallConfig/","page":"Installation and getting started","title":"Installation and getting started","text":"See the online Documentation for details.","category":"page"},{"location":"ComponentsWorkflow/#PALEOtoolkit-components-and-workflow","page":"PALEOtoolkit components and workflow","title":"PALEOtoolkit components and workflow","text":"","category":"section"},{"location":"ComponentsWorkflow/","page":"PALEOtoolkit components and workflow","title":"PALEOtoolkit components and workflow","text":"(Image: image)","category":"page"},{"location":"HOWTOshowmodelandoutput/#Displaying-model-configuration-and-output-from-the-Julia-REPL","page":"Displaying model configuration and output from the Julia REPL","title":"Displaying model configuration and output from the Julia REPL","text":"","category":"section"},{"location":"HOWTOshowmodelandoutput/","page":"Displaying model configuration and output from the Julia REPL","title":"Displaying model configuration and output from the Julia REPL","text":"The specific examples below were generated after running the PALEOcopse COPSE Reloaded example from the Julia REPL, but apply to any PALEOtoolkit model.","category":"page"},{"location":"HOWTOshowmodelandoutput/#Displaying-large-tables-in-Julia","page":"Displaying model configuration and output from the Julia REPL","title":"Displaying large tables in Julia","text":"","category":"section"},{"location":"HOWTOshowmodelandoutput/","page":"Displaying model configuration and output from the Julia REPL","title":"Displaying model configuration and output from the Julia REPL","text":"Several PALEO commands produce large tables.","category":"page"},{"location":"HOWTOshowmodelandoutput/","page":"Displaying model configuration and output from the Julia REPL","title":"Displaying model configuration and output from the Julia REPL","text":"There are several options to display these:","category":"page"},{"location":"HOWTOshowmodelandoutput/","page":"Displaying model configuration and output from the Julia REPL","title":"Displaying model configuration and output from the Julia REPL","text":"Julia in VS code provides the julia> vscodedisplay(<some table>) command. As of Jan 2022 this is now usually the best option.\nUse julia> show(<some table>, allcols=true, allrows=true) to show as text in the REPL. \nUse julia> CSV.write(\"some_table.csv\", <some table>) to save as a CSV file and open in Excel etc.","category":"page"},{"location":"HOWTOshowmodelandoutput/#Find-code-and-documentation","page":"Displaying model configuration and output from the Julia REPL","title":"Find code and documentation","text":"","category":"section"},{"location":"HOWTOshowmodelandoutput/","page":"Displaying model configuration and output from the Julia REPL","title":"Displaying model configuration and output from the Julia REPL","text":"The documentation for a PALEO reaction can be looked up using the  PALEOboxes.doc_reaction command:","category":"page"},{"location":"HOWTOshowmodelandoutput/","page":"Displaying model configuration and output from the Julia REPL","title":"Displaying model configuration and output from the Julia REPL","text":"julia> PB.doc_reaction(\"ReactionReservoirScalar\")","category":"page"},{"location":"HOWTOshowmodelandoutput/","page":"Displaying model configuration and output from the Julia REPL","title":"Displaying model configuration and output from the Julia REPL","text":"NB: the VS Code Documentation browser has similar functionality and is often easier to use. The key difference that it looks at definitions visible in the VS code projects and editor windows, whilst doc_reaction looks at definitions available to code in the current REPL ie provided by modules that are currently loaded in the REPL.","category":"page"},{"location":"HOWTOshowmodelandoutput/#Display-model-configuration","page":"Displaying model configuration and output from the Julia REPL","title":"Display model configuration","text":"","category":"section"},{"location":"HOWTOshowmodelandoutput/#Display-parameters:","page":"Displaying model configuration and output from the Julia REPL","title":"Display parameters:","text":"","category":"section"},{"location":"HOWTOshowmodelandoutput/","page":"Displaying model configuration and output from the Julia REPL","title":"Displaying model configuration and output from the Julia REPL","text":"Examples illustrating the use of PALEOboxes.show_parameters:","category":"page"},{"location":"HOWTOshowmodelandoutput/","page":"Displaying model configuration and output from the Julia REPL","title":"Displaying model configuration and output from the Julia REPL","text":"To show parameters for every Reaction in the model:","category":"page"},{"location":"HOWTOshowmodelandoutput/","page":"Displaying model configuration and output from the Julia REPL","title":"Displaying model configuration and output from the Julia REPL","text":"julia> vscodedisplay(PB.show_parameters(model)) # show in VS code table viewer\njulia> show(PB.show_parameters(model), allrows=true) # show as text in REPL \njulia> import CSV\njulia> CSV.write(\"parameters.csv\", PB.show_parameters(model)) # save as CSV for Excel etc","category":"page"},{"location":"HOWTOshowmodelandoutput/","page":"Displaying model configuration and output from the Julia REPL","title":"Displaying model configuration and output from the Julia REPL","text":"This illustrates the modularised model structure, with:","category":"page"},{"location":"HOWTOshowmodelandoutput/","page":"Displaying model configuration and output from the Julia REPL","title":"Displaying model configuration and output from the Julia REPL","text":"Domains global, atm, land, ocean, oceansurface, oceanfloor, sedcrust containing forcings and biogeochemical Reactions, with Parameters attached to each Reaction.\nAdditional Domains fluxAtoLand, fluxLandtoSedCrust, fluxOceanBurial, fluxOceanfloor, fluxRtoOcean, fluxSedCrusttoAOcean containing flux coupler Reactions.","category":"page"},{"location":"HOWTOshowmodelandoutput/","page":"Displaying model configuration and output from the Julia REPL","title":"Displaying model configuration and output from the Julia REPL","text":"To show parameters for a single Reaction:","category":"page"},{"location":"HOWTOshowmodelandoutput/","page":"Displaying model configuration and output from the Julia REPL","title":"Displaying model configuration and output from the Julia REPL","text":"julia> rct_temp_global = PB.get_reaction(model, \"global\", \"temp_global\")\njulia> PB.show_parameters(rct_temp_global)    # GEOCARB temperature function parameters","category":"page"},{"location":"HOWTOshowmodelandoutput/","page":"Displaying model configuration and output from the Julia REPL","title":"Displaying model configuration and output from the Julia REPL","text":"The Julia Type of rct_temp_global PALEOcopse.Global.Temperature.ReactionGlobalTemperatureBerner usually makes it possible to guess the location src/global/Temperature.jl in the source code https://github.com/PALEOtoolkit/PALEOcopse.jl of the PALEOcopse Julia package.","category":"page"},{"location":"HOWTOshowmodelandoutput/#Display-Variables:","page":"Displaying model configuration and output from the Julia REPL","title":"Display Variables:","text":"","category":"section"},{"location":"HOWTOshowmodelandoutput/#Show-Variables-in-the-model:","page":"Displaying model configuration and output from the Julia REPL","title":"Show Variables in the model:","text":"","category":"section"},{"location":"HOWTOshowmodelandoutput/","page":"Displaying model configuration and output from the Julia REPL","title":"Displaying model configuration and output from the Julia REPL","text":"Use PALEOboxes.show_variables to list all Variables in the model, or Variables for a specific Domain:","category":"page"},{"location":"HOWTOshowmodelandoutput/","page":"Displaying model configuration and output from the Julia REPL","title":"Displaying model configuration and output from the Julia REPL","text":"julia> vscodedisplay(PB.show_variables(model)) # VS code only\njulia> vscodedisplay(PB.show_variables(model, \"land\")) # just the \"land\" Domain","category":"page"},{"location":"HOWTOshowmodelandoutput/","page":"Displaying model configuration and output from the Julia REPL","title":"Displaying model configuration and output from the Julia REPL","text":"To list full information for all Variables in the model (including Variable linking and current values):","category":"page"},{"location":"HOWTOshowmodelandoutput/","page":"Displaying model configuration and output from the Julia REPL","title":"Displaying model configuration and output from the Julia REPL","text":"julia> vscodedisplay(PB.show_variables(model; modeldata=modeldata, showlinks=true))","category":"page"},{"location":"HOWTOshowmodelandoutput/","page":"Displaying model configuration and output from the Julia REPL","title":"Displaying model configuration and output from the Julia REPL","text":"This illustrates the modularized model structure, with:","category":"page"},{"location":"HOWTOshowmodelandoutput/","page":"Displaying model configuration and output from the Julia REPL","title":"Displaying model configuration and output from the Julia REPL","text":"Domains global, atm, land, ocean, oceansurface, oceanfloor, sedcrust containing Variables linked to Reactions (either property-dependencies or target-contributors pairs).\nAdditional Domains fluxAtoLand, fluxLandtoSedCrust, fluxOceanBurial, fluxOceanfloor, fluxRtoOcean, fluxSedCrusttoAOcean containing target-contributor pairs representing inter-module fluxes.","category":"page"},{"location":"HOWTOshowmodelandoutput/#Show-linkage-for-a-single-Domain-or-ReactionMethod-Variable","page":"Displaying model configuration and output from the Julia REPL","title":"Show linkage for a single Domain or ReactionMethod Variable","text":"","category":"section"},{"location":"HOWTOshowmodelandoutput/","page":"Displaying model configuration and output from the Julia REPL","title":"Displaying model configuration and output from the Julia REPL","text":"To show linkage of a single Variable in Domain \"atm\" with name \"pO2PAL\":","category":"page"},{"location":"HOWTOshowmodelandoutput/","page":"Displaying model configuration and output from the Julia REPL","title":"Displaying model configuration and output from the Julia REPL","text":"julia> PB.show_links(model, \"atm.pO2PAL\")","category":"page"},{"location":"HOWTOshowmodelandoutput/","page":"Displaying model configuration and output from the Julia REPL","title":"Displaying model configuration and output from the Julia REPL","text":"To show linkage of a ReactionMethod Variable with localname \"pO2PAL\", Reaction \"ocean_copse\" in Domain \"ocean\":","category":"page"},{"location":"HOWTOshowmodelandoutput/","page":"Displaying model configuration and output from the Julia REPL","title":"Displaying model configuration and output from the Julia REPL","text":"julia> PB.show_links(PB.get_reaction_variables(model, \"ocean\", \"ocean_copse\", \"pO2PAL\"))","category":"page"},{"location":"HOWTOshowmodelandoutput/#Display-model-output","page":"Displaying model configuration and output from the Julia REPL","title":"Display model output","text":"","category":"section"},{"location":"HOWTOshowmodelandoutput/","page":"Displaying model configuration and output from the Julia REPL","title":"Displaying model configuration and output from the Julia REPL","text":"Model output is stored in a PALEOmodel.AbstractOutputWriter object, which is available as paleorun.output, ie the output field of the default PALEOmodel.Run instance created by the COPSE_reloaded_reloaded.jl script.","category":"page"},{"location":"HOWTOshowmodelandoutput/","page":"Displaying model configuration and output from the Julia REPL","title":"Displaying model configuration and output from the Julia REPL","text":"The default PALEOmodel.OutputWriters.OutputMemory stores model output in memory, by Domain:","category":"page"},{"location":"HOWTOshowmodelandoutput/","page":"Displaying model configuration and output from the Julia REPL","title":"Displaying model configuration and output from the Julia REPL","text":"julia> paleorun.output  # shows Domains","category":"page"},{"location":"HOWTOshowmodelandoutput/","page":"Displaying model configuration and output from the Julia REPL","title":"Displaying model configuration and output from the Julia REPL","text":"To show metadata for all Variables in the output:","category":"page"},{"location":"HOWTOshowmodelandoutput/","page":"Displaying model configuration and output from the Julia REPL","title":"Displaying model configuration and output from the Julia REPL","text":"julia> vscodedisplay(PB.show_variables(paleorun.output)) # VS code only\njulia> vscodedisplay(PB.show_variables(paleorun.output, \"land\")) # just the land Domain","category":"page"},{"location":"HOWTOshowmodelandoutput/","page":"Displaying model configuration and output from the Julia REPL","title":"Displaying model configuration and output from the Julia REPL","text":"Output from a list of Variables or for each Domain can be exported to a Julia DataFrame:","category":"page"},{"location":"HOWTOshowmodelandoutput/","page":"Displaying model configuration and output from the Julia REPL","title":"Displaying model configuration and output from the Julia REPL","text":"julia> # display data for a list of Variables as a Table\njulia> vscodedisplay(PB.get_table(paleorun.output, [\"atm.tmodel\", \"atm.pCO2PAL\", \"fluxOceanBurial.flux_total_P\"]))\n\njulia> # display data for every Variable in the 'atm' Domain as a Table\njulia> vscodedisplay(PB.get_table(paleorun.output, \"atm\"))\n\njulia> # show a subset of output variables from the 'atm' Domain\njulia> PB.get_table(paleorun.output, \"atm\")[!, [:tmodel, :pCO2atm, :pCO2PAL]]","category":"page"},{"location":"HOWTOshowmodelandoutput/","page":"Displaying model configuration and output from the Julia REPL","title":"Displaying model configuration and output from the Julia REPL","text":"Data from each Variable can be accessed as a PALEOmodel.FieldArray (a Python-xarray like struct with named dimensions and coordinates):","category":"page"},{"location":"HOWTOshowmodelandoutput/","page":"Displaying model configuration and output from the Julia REPL","title":"Displaying model configuration and output from the Julia REPL","text":"julia> pCO2atm = PALEOmodel.get_array(paleorun.output, \"atm.pCO2atm\")\njulia> pCO2atm.values # raw data Array\njulia> pCO2atm.dims_coords # pCO2 is a scalar Variable with one dimension `tmodel` which has one coordinate variable also called `tmodel`\njulia> pCO2atm.dims_coords[1] # first dimension, as a Pair dimension => vector of attached coordinates\njulia> pCO2atm.dims_coords[1][2][1] # coordinate variable (also a FieldArray)\njulia> pCO2atm.dims_coords[1][2][1].values # raw values for model time (`tmodel`) from coordinate variable","category":"page"},{"location":"HOWTOshowmodelandoutput/","page":"Displaying model configuration and output from the Julia REPL","title":"Displaying model configuration and output from the Julia REPL","text":"Raw data arrays can also be accessed as Julia Vectors using get_data:","category":"page"},{"location":"HOWTOshowmodelandoutput/","page":"Displaying model configuration and output from the Julia REPL","title":"Displaying model configuration and output from the Julia REPL","text":"julia> pCO2atm_raw = PB.get_data(paleorun.output, \"atm.pCO2atm\")  # raw data Array\njulia> tmodel_raw = PB.get_data(paleorun.output, \"atm.tmodel\") # raw data Array","category":"page"},{"location":"HOWTOshowmodelandoutput/","page":"Displaying model configuration and output from the Julia REPL","title":"Displaying model configuration and output from the Julia REPL","text":"(here these are the values and coordinate of the pCO2atm PALEOmodel.FieldArray, ie pCO2atm_raw == pCO2atm.values and tmodel_raw == pCO2atm.dims_coords[1][2][1].values).","category":"page"},{"location":"HOWTOshowmodelandoutput/#Plot-model-output","page":"Displaying model configuration and output from the Julia REPL","title":"Plot model output","text":"","category":"section"},{"location":"HOWTOshowmodelandoutput/","page":"Displaying model configuration and output from the Julia REPL","title":"Displaying model configuration and output from the Julia REPL","text":"The output can be plotted using the Julia Plots.jl package, see Plotting output. Plot recipes are defined for PALEOmodel.FieldArray, so output data can be plotted directly using the plot command:","category":"page"},{"location":"HOWTOshowmodelandoutput/","page":"Displaying model configuration and output from the Julia REPL","title":"Displaying model configuration and output from the Julia REPL","text":"julia> using Plots\n\njulia> plot(paleorun.output, \"atm.pCO2atm\")  # plot output variable as a single command\njulia> plot(title=\"Oxygen\", paleorun.output, [\"atm.pO2PAL\", \"ocean.ANOX\"]) # overlay multiple output variables in one plot\n\njulia> pCO2atm = PALEOmodel.get_array(paleorun.output, \"atm.pCO2atm\")\njulia> plot(pCO2atm) # a PALEOmodel.FieldArray can be plotted\n\njulia> pCO2atm_raw = PB.get_data(paleorun.output, \"atm.pCO2atm\")  # raw data Array\njulia> tmodel_raw = PB.get_data(paleorun.output, \"atm.tmodel\") # raw data Array\njulia> plot!(tmodel_raw, pCO2atm_raw, label=\"some raw data\") # overlay data from standard Julia Vectors","category":"page"},{"location":"HOWTOshowmodelandoutput/#Spatial-or-wavelength-dependent-output","page":"Displaying model configuration and output from the Julia REPL","title":"Spatial or wavelength-dependent output","text":"","category":"section"},{"location":"HOWTOshowmodelandoutput/","page":"Displaying model configuration and output from the Julia REPL","title":"Displaying model configuration and output from the Julia REPL","text":"To analyze spatial or eg wavelength-dependent output (eg time series from a 1D column or 3D general circulation model, or quantities that are a function of wavelength or frequency), PALEOmodel.get_array takes an additional selectargs::NamedTuple argument to take 1D or 2D slices from the spatial, spectral and timeseries data. The PALEOmodel.FieldArray returned includes default coordinates to plot column (1D) and heatmap (2D) data, these can be overridden by supplying the optional coords keyword argument.","category":"page"},{"location":"HOWTOshowmodelandoutput/#Examples-for-a-column-based-model","page":"Displaying model configuration and output from the Julia REPL","title":"Examples for a column-based model","text":"","category":"section"},{"location":"HOWTOshowmodelandoutput/","page":"Displaying model configuration and output from the Julia REPL","title":"Displaying model configuration and output from the Julia REPL","text":"Visualisation of spatial and wavelength-dependent output from the PALEOatmosphere.jl ozone photochemistry example (a single 1D atmospheric column):","category":"page"},{"location":"HOWTOshowmodelandoutput/#1D-column-data","page":"Displaying model configuration and output from the Julia REPL","title":"1D column data","text":"","category":"section"},{"location":"HOWTOshowmodelandoutput/","page":"Displaying model configuration and output from the Julia REPL","title":"Displaying model configuration and output from the Julia REPL","text":"To plot O3 mixing ratio vs height in the 1D atmosphere column, at the last model timestep:","category":"page"},{"location":"HOWTOshowmodelandoutput/","page":"Displaying model configuration and output from the Julia REPL","title":"Displaying model configuration and output from the Julia REPL","text":"julia> plot(title=\"O3 mixing ratio\", paleorun.output, \"atm.O3_mr\", (tmodel=1e12, column=1),\n            swap_xy=true, xscale=:log10) # plots O3 vs default height coordinate, at the nearest model time to 1e12 yr (ie the last timestep)","category":"page"},{"location":"HOWTOshowmodelandoutput/","page":"Displaying model configuration and output from the Julia REPL","title":"Displaying model configuration and output from the Julia REPL","text":"To plot results from multiple output times:","category":"page"},{"location":"HOWTOshowmodelandoutput/","page":"Displaying model configuration and output from the Julia REPL","title":"Displaying model configuration and output from the Julia REPL","text":"julia> plot(title=\"O3 mixing ratio\", paleorun.output, \"atm.O3_mr\", (tmodel=[0.0, 0.1, 1.0, 10.0, 100.0, 1000.0], column=1),\n            swap_xy=true, xscale=:log10, labelattribute=:filter_records) # plots O3 vs default height coordinate","category":"page"},{"location":"HOWTOshowmodelandoutput/","page":"Displaying model configuration and output from the Julia REPL","title":"Displaying model configuration and output from the Julia REPL","text":"Here the plot recipe expands the Vector-valued tmodel argument to create a composite plot. The optional labelattribute=:filter_records keyword argument is used to generate plot labels from the :filter_records FieldArray attribute, which contains the tmodel values used to select the timeseries records.  ","category":"page"},{"location":"HOWTOshowmodelandoutput/","page":"Displaying model configuration and output from the Julia REPL","title":"Displaying model configuration and output from the Julia REPL","text":"This is equivalent to first creating and then plotting a sequence of FieldArray objects:","category":"page"},{"location":"HOWTOshowmodelandoutput/","page":"Displaying model configuration and output from the Julia REPL","title":"Displaying model configuration and output from the Julia REPL","text":"julia> O3_mr = PALEOmodel.get_array(paleorun.output, \"atm.O3_mr\", (tmodel=0.0, column=1))\njulia> plot(title=\"O3 mixing ratio\", O3_mr, swap_xy=true, xscale=:log10, labelattribute=:filter_records)\njulia> O3_mr = PALEOmodel.get_array(paleorun.output, \"atm.O3_mr\", (tmodel=0.1, column=1))\njulia> plot!(O3_mr, swap_xy=true, labelattribute=:filter_records)","category":"page"},{"location":"HOWTOshowmodelandoutput/","page":"Displaying model configuration and output from the Julia REPL","title":"Displaying model configuration and output from the Julia REPL","text":"The default height coordinate from the model grid can be replaced using the optional coords keyword argument, eg","category":"page"},{"location":"HOWTOshowmodelandoutput/","page":"Displaying model configuration and output from the Julia REPL","title":"Displaying model configuration and output from the Julia REPL","text":"julia> plot(title=\"O3 mixing ratio\", paleorun.output, \"atm.O3_mr\", (tmodel=[0.0, 0.1, 1.0, 10.0, 100.0, 1000.0], column=1),\n            coords=[\"cells\"=>(\"atm.pmid\", \"atm.plower\", \"atm.pupper\")],\n            swap_xy=true, xscale=:log10, yflip=true, yscale=:log10, labelattribute=:filter_records) # plots O3 vs pressure","category":"page"},{"location":"HOWTOshowmodelandoutput/#Wavelength-dependent-data","page":"Displaying model configuration and output from the Julia REPL","title":"Wavelength-dependent data","text":"","category":"section"},{"location":"HOWTOshowmodelandoutput/","page":"Displaying model configuration and output from the Julia REPL","title":"Displaying model configuration and output from the Julia REPL","text":"julia> plot(title=\"direct transmittance\", paleorun.output, [\"atm.direct_trans\"], (tmodel=1e12, column=1, cell=[1, 80]),\n            ylabel=\"fraction\", labelattribute=:filter_region) # plots vs wavelength","category":"page"},{"location":"HOWTOshowmodelandoutput/","page":"Displaying model configuration and output from the Julia REPL","title":"Displaying model configuration and output from the Julia REPL","text":"Here tmodel=1e12 selects the nearest model time to 1e12 yr ie the last model time output, and column=1, cell=[1, 80] selects the top and bottom cells within the first (only) 1D column. The labelattribute=:filter_region keyword argument is used to generate plot labels from the :filter_region FieldArray attribute, which contains the column and cell values used to select the spatial region.","category":"page"},{"location":"HOWTOshowmodelandoutput/#Examples-for-a-3D-GCM-based-model","page":"Displaying model configuration and output from the Julia REPL","title":"Examples for a 3D GCM-based model","text":"","category":"section"},{"location":"HOWTOshowmodelandoutput/","page":"Displaying model configuration and output from the Julia REPL","title":"Displaying model configuration and output from the Julia REPL","text":"Visualisation of spatial output from the 3D MITgcm transport-matrix example (PALEOocean.jl repository)","category":"page"},{"location":"HOWTOshowmodelandoutput/#Horizontal-slices-across-levels","page":"Displaying model configuration and output from the Julia REPL","title":"Horizontal slices across levels","text":"","category":"section"},{"location":"HOWTOshowmodelandoutput/","page":"Displaying model configuration and output from the Julia REPL","title":"Displaying model configuration and output from the Julia REPL","text":"julia> heatmap(paleorun.output, \"ocean.O2_conc\", (tmodel=1e12, zt_isel=1, expand_cartesian=true), swap_xy=true)","category":"page"},{"location":"HOWTOshowmodelandoutput/","page":"Displaying model configuration and output from the Julia REPL","title":"Displaying model configuration and output from the Julia REPL","text":"Here zt_isel=1 selects a horizontal level corresponding to model grid cells with index of 'zt' dimension = 1, which is the ocean surface in the MITgcm grid (NB: naming of dimensions is specific to model configurations, as is ordering and sign of depth coordinates hence need for swap_xy option). expand_cartesian=true expands the internal storage from a vector of cells to a 3D cartesian grid.","category":"page"},{"location":"HOWTOshowmodelandoutput/#Vertical-section-at-constant-longitude","page":"Displaying model configuration and output from the Julia REPL","title":"Vertical section at constant longitude","text":"","category":"section"},{"location":"HOWTOshowmodelandoutput/","page":"Displaying model configuration and output from the Julia REPL","title":"Displaying model configuration and output from the Julia REPL","text":"julia> heatmap(paleorun.output, \"ocean.O2_conc\", (tmodel=1e12, lon=340.0, expand_cartesian=true), swap_xy=true)","category":"page"},{"location":"HOWTOshowmodelandoutput/","page":"Displaying model configuration and output from the Julia REPL","title":"Displaying model configuration and output from the Julia REPL","text":"Here lon=340.0 selects a section at the nearest 'lon' coordinate to 340.0 degrees east (NB: naming of dimensions is specific to model configurations, as is ordering and sign of depth coordinates hence need for swap_xy and mult_y_coord options).","category":"page"},{"location":"HOWTOshowmodelandoutput/#Exporting-to-netcdf-to-use-xarray-etc","page":"Displaying model configuration and output from the Julia REPL","title":"Exporting to netcdf to use xarray etc","text":"","category":"section"},{"location":"HOWTOshowmodelandoutput/","page":"Displaying model configuration and output from the Julia REPL","title":"Displaying model configuration and output from the Julia REPL","text":"PALEO output (see below) is in standard netcdf format with the ocean data in the ocean group of a multi-group netcdf file, so can be analyzed using eg the Python xarray package, see example Jupyter notebook in the PALEOocean repository, examples/mitgcm folder. ","category":"page"},{"location":"HOWTOshowmodelandoutput/#Save-and-load-output","page":"Displaying model configuration and output from the Julia REPL","title":"Save and load output","text":"","category":"section"},{"location":"HOWTOshowmodelandoutput/","page":"Displaying model configuration and output from the Julia REPL","title":"Displaying model configuration and output from the Julia REPL","text":"Model output can be saved and loaded using the PALEOmodel.OutputWriters.save_netcdf and PALEOmodel.OutputWriters.load_netcdf! methods.","category":"page"},{"location":"HOWTOshowmodelandoutput/","page":"Displaying model configuration and output from the Julia REPL","title":"Displaying model configuration and output from the Julia REPL","text":"Output attempts to follow standard netcdf conventions. NB each PALEO Domain is a separate group in a multi-group netcdf file.","category":"page"},{"location":"HOWTOshowmodelandoutput/#Export-output-to-a-CSV-file","page":"Displaying model configuration and output from the Julia REPL","title":"Export output to a CSV file","text":"","category":"section"},{"location":"HOWTOshowmodelandoutput/","page":"Displaying model configuration and output from the Julia REPL","title":"Displaying model configuration and output from the Julia REPL","text":"To write Model output from a single Domain to a CSV file:","category":"page"},{"location":"HOWTOshowmodelandoutput/","page":"Displaying model configuration and output from the Julia REPL","title":"Displaying model configuration and output from the Julia REPL","text":"julia> import CSV\njulia> CSV.write(\"copse_land.csv\", PB.get_table(paleorun.output, \"land\")) # all Variables from land Domain\njulia> CSV.write(\"copse_atm.csv\", PB.get_table(paleorun.output, \"atm\")[!, [:tmodel, :pCO2atm, :pO2atm]]) # subset of Variables from atm Domain","category":"page"},{"location":"collated_examples/CPU_modular/README/#CPU-(Carbon,-Phosphorus,-Uranium)-model","page":"CPU (Carbon, Phosphorus, Uranium) model","title":"CPU (Carbon, Phosphorus, Uranium) model","text":"","category":"section"},{"location":"collated_examples/CPU_modular/README/","page":"CPU (Carbon, Phosphorus, Uranium) model","title":"CPU (Carbon, Phosphorus, Uranium) model","text":"These examples demonstrate the CPU model ((Clarkson et al., 2018)) using a modularised configuration in PALEO with parameter values from ((Zhang et al., 2020)).","category":"page"},{"location":"collated_examples/CPU_modular/README/","page":"CPU (Carbon, Phosphorus, Uranium) model","title":"CPU (Carbon, Phosphorus, Uranium) model","text":"The model configuration now contains atm, land, ocean Domains in addition to a global Domain.  The CPU model itself is split into two pieces, a ReactionLandCPU and ReactionOceanCPU, connected by fluxes in Domains fluxRtoOcean (for P, U, DIC, TAlk) and fluxAtoLand (for CO2).  The A reservoir (combined atmosphere and ocean carbon) is placed in an atmocean Domain and configured to calculate CO2_delta and DIC_delta in addition to partitioning of carbon between atmosphere and ocean, with atmosphere CO2_sms and ocean DIC_sms fluxes rerouted to A_sms using variable_links in the .yaml file.","category":"page"},{"location":"collated_examples/CPU_modular/README/#Setting-the-Julia-environment-and-working-directory","page":"CPU (Carbon, Phosphorus, Uranium) model","title":"Setting the Julia environment and working directory","text":"","category":"section"},{"location":"collated_examples/CPU_modular/README/","page":"CPU (Carbon, Phosphorus, Uranium) model","title":"CPU (Carbon, Phosphorus, Uranium) model","text":"Change the Julia REPL working directory to the PALEOtutorials/examples/CPU_modular folder:","category":"page"},{"location":"collated_examples/CPU_modular/README/","page":"CPU (Carbon, Phosphorus, Uranium) model","title":"CPU (Carbon, Phosphorus, Uranium) model","text":"In VS code, right click on this folder in the file browser and select Julia: Change to This Directory. Or from the REPL, use the cd command):","category":"page"},{"location":"collated_examples/CPU_modular/README/","page":"CPU (Carbon, Phosphorus, Uranium) model","title":"CPU (Carbon, Phosphorus, Uranium) model","text":"julia> cd(\"PALEOtutorials/examples/CPU\")","category":"page"},{"location":"collated_examples/CPU_modular/README/","page":"CPU (Carbon, Phosphorus, Uranium) model","title":"CPU (Carbon, Phosphorus, Uranium) model","text":"If it is not already active, activate the Julia environment PALEOtutorials/examples:","category":"page"},{"location":"collated_examples/CPU_modular/README/","page":"CPU (Carbon, Phosphorus, Uranium) model","title":"CPU (Carbon, Phosphorus, Uranium) model","text":"In VS code, right click on PALEOtutorials/examples or any subfolder in the file browser and select Julia: Activate Parent Environment. Or from the REPL, use ] to enter package management:","category":"page"},{"location":"collated_examples/CPU_modular/README/","page":"CPU (Carbon, Phosphorus, Uranium) model","title":"CPU (Carbon, Phosphorus, Uranium) model","text":"julia> pwd()\n\"/home/sd336/software/julia/PALEOtutorials/examples/CPU_modular\"\njulia> ] \n(@v1.7) pkg> activate ../\n  Activating project at `/home/sd336/software/julia/PALEOtutorials/examples`","category":"page"},{"location":"collated_examples/CPU_modular/README/#To-run-the-modular-CPU-example-with-a-default-3e18-mol-C-perturbation","page":"CPU (Carbon, Phosphorus, Uranium) model","title":"To run the modular CPU example with a default 3e18 mol C perturbation","text":"","category":"section"},{"location":"collated_examples/CPU_modular/README/","page":"CPU (Carbon, Phosphorus, Uranium) model","title":"CPU (Carbon, Phosphorus, Uranium) model","text":"julia> include(\"CPU_modular_examples.jl\")","category":"page"},{"location":"collated_examples/CPU_modular/README/","page":"CPU (Carbon, Phosphorus, Uranium) model","title":"CPU (Carbon, Phosphorus, Uranium) model","text":"This will run and plot output (NB: the first run will be slow as Julia JIT compiles the code).","category":"page"},{"location":"collated_examples/CPU_modular/README/#To-display-model-Parameters,-Variables,-and-output.","page":"CPU (Carbon, Phosphorus, Uranium) model","title":"To display model Parameters, Variables, and output.","text":"","category":"section"},{"location":"collated_examples/CPU_modular/README/","page":"CPU (Carbon, Phosphorus, Uranium) model","title":"CPU (Carbon, Phosphorus, Uranium) model","text":"See Displaying model configuration and output from the Julia REPL ","category":"page"},{"location":"HOWTOdocumentation/#Creating-and-updating-PALEO-documentation","page":"Creating and updating PALEO documentation","title":"Creating and updating PALEO documentation","text":"","category":"section"},{"location":"HOWTOdocumentation/#Structure-of-PALEO-documentation","page":"Creating and updating PALEO documentation","title":"Structure of PALEO documentation","text":"","category":"section"},{"location":"HOWTOdocumentation/","page":"Creating and updating PALEO documentation","title":"Creating and updating PALEO documentation","text":"Each PALEO repository follows the same structure and uses the same tools, just with different content.","category":"page"},{"location":"HOWTOdocumentation/","page":"Creating and updating PALEO documentation","title":"Creating and updating PALEO documentation","text":"PALEO documentation broadly follows the four-way split into tutorials, how-to guides, technical reference and explanation proposed by Divio","category":"page"},{"location":"HOWTOdocumentation/","page":"Creating and updating PALEO documentation","title":"Creating and updating PALEO documentation","text":"The PALEO-specific version of this is:","category":"page"},{"location":"HOWTOdocumentation/","page":"Creating and updating PALEO documentation","title":"Creating and updating PALEO documentation","text":"Tutorials    -> Examples (collated from README.md in subfolders under ./examples/ or ./PALEOexamples/) \nHOWTO guides -> HOWTOS (markdown documents in docs/src/ with HOWTO prefix)\nExplanation  -> Design (markdown documents in docs/src/ eg https://paleotoolkit.github.io/PALEOboxes.jl/stable/DesignOverview/)\nReference    -> Reference (markdown document(s) in docs/src/ with a hand-crafted structure and most of the text autogenerated from docstrings in the Julia code)","category":"page"},{"location":"HOWTOdocumentation/#Tools-for-PALEO-documentation","page":"Creating and updating PALEO documentation","title":"Tools for PALEO documentation","text":"","category":"section"},{"location":"HOWTOdocumentation/","page":"Creating and updating PALEO documentation","title":"Creating and updating PALEO documentation","text":"The overall principle here is keep documentation minimal, and avoid duplication (which just rapidly goes out of date).","category":"page"},{"location":"HOWTOdocumentation/","page":"Creating and updating PALEO documentation","title":"Creating and updating PALEO documentation","text":"The documentation is created by the Julia Documenter.jl package, from scripts and markdown documents in the ./docs/ folder. ","category":"page"},{"location":"HOWTOdocumentation/","page":"Creating and updating PALEO documentation","title":"Creating and updating PALEO documentation","text":"./docs/make.jl specifies the structure, and the markdown files to include.\n./docs/src/ contains the documentation source files in Markdown\n./docs/src/paleo_references.bib is a (hand-generated) bibtex bibliography, used by DocumenterCitations.jl to provide citations.\ncode is documented using Julia docstrings, see the documentation section in the Julia manual.","category":"page"},{"location":"HOWTOdocumentation/#Creating-and-viewing-documentation-locally","page":"Creating and updating PALEO documentation","title":"Creating and viewing documentation locally","text":"","category":"section"},{"location":"HOWTOdocumentation/","page":"Creating and updating PALEO documentation","title":"Creating and updating PALEO documentation","text":"activate the ./docs/ environment (eg right click in VS code)\nchange directory to the ./docs/ folder\njulia> include(\"make.jl\")","category":"page"},{"location":"HOWTOdocumentation/","page":"Creating and updating PALEO documentation","title":"Creating and updating PALEO documentation","text":"Output is created in the ./docs/build/ folder, index.html in this folder is the top of the html documentation tree.","category":"page"},{"location":"HOWTOdocumentation/","page":"Creating and updating PALEO documentation","title":"Creating and updating PALEO documentation","text":"There are two options to view this locally in a web browser:","category":"page"},{"location":"HOWTOdocumentation/","page":"Creating and updating PALEO documentation","title":"Creating and updating PALEO documentation","text":"Navigate to ./docs/build/ in a file browser, and click on index.html. \nInstall the VS Code Liveserver plugin, and right-click in the VS code file browser and select Open with Live Server","category":"page"},{"location":"HOWTOdocumentation/#Publishing-documentation-on-github","page":"Creating and updating PALEO documentation","title":"Publishing documentation on github","text":"","category":"section"},{"location":"HOWTOdocumentation/","page":"Creating and updating PALEO documentation","title":"Creating and updating PALEO documentation","text":"The public PALEO repositories (eg PALEOcopse) include a github workflow file (in .github/workflows/documentation.yml) that runs the build process on github, and then publishes the output to github pages.  This runs automatically when a new release is created.","category":"page"},{"location":"HOWTOdocumentation/#Adding-a-new-top-level-document","page":"Creating and updating PALEO documentation","title":"Adding a new top-level document","text":"","category":"section"},{"location":"HOWTOdocumentation/","page":"Creating and updating PALEO documentation","title":"Creating and updating PALEO documentation","text":"Create a new markdown file in the ./docs/ subfolder.\nUpdate ./docs/make.jl to add this file at the relevant point in the documentation tree","category":"page"},{"location":"HOWTOdocumentation/#Documenting-PALEO-code","page":"Creating and updating PALEO documentation","title":"Documenting PALEO code","text":"","category":"section"},{"location":"HOWTOdocumentation/","page":"Creating and updating PALEO documentation","title":"Creating and updating PALEO documentation","text":"Code eg PALEO reactions is documented using Julia docstrings, see the documentation section in the Julia manual.","category":"page"},{"location":"HOWTOdocumentation/","page":"Creating and updating PALEO documentation","title":"Creating and updating PALEO documentation","text":"There are then two parts to this:","category":"page"},{"location":"HOWTOdocumentation/","page":"Creating and updating PALEO documentation","title":"Creating and updating PALEO documentation","text":"Add docstrings in the .jl code files. There are some PALEO-specific extensions implemented to make it easy to document PALEO reaction Parameters and Variables,  each module should contain using PALEOboxes.DocStrings to make these available. The docstring can then contain:\n # Parameters\n $(PARS)\n\n # Methods and Variables\n $(METHODS_DO)\nwhich will automatically generate documentation from the description and units fields.\nUpdate the top-level Reference documentation (markdown file(s) under ./docs) to include the new Reactions etc. This will expand into the docstring content.","category":"page"},{"location":"HOWTOdocumentation/#Documenting-PALEO-examples","page":"Creating and updating PALEO documentation","title":"Documenting PALEO examples","text":"","category":"section"},{"location":"HOWTOdocumentation/","page":"Creating and updating PALEO documentation","title":"Creating and updating PALEO documentation","text":"The mimimal, lightweight approach to documenting examples is to add a README.md to the subfolder.  Suggest think of this like a lab book.","category":"page"},{"location":"HOWTOdocumentation/","page":"Creating and updating PALEO documentation","title":"Creating and updating PALEO documentation","text":"This can then be used in multiple ways:","category":"page"},{"location":"HOWTOdocumentation/","page":"Creating and updating PALEO documentation","title":"Creating and updating PALEO documentation","text":"view locally, either as raw markdown, or use VS code to render a preview (right click on the .md file).\ngithub will show a README.md by default when you browse to that folder on github.com\nthe top-level documentation build script automatically collates all markdown documents it finds in examples subfolders into a browseable tree on the documentation web pages.","category":"page"},{"location":"HOWTOdocumentation/","page":"Creating and updating PALEO documentation","title":"Creating and updating PALEO documentation","text":"It is straightforward to add images to the README.md:","category":"page"},{"location":"HOWTOdocumentation/","page":"Creating and updating PALEO documentation","title":"Creating and updating PALEO documentation","text":"create an images/ subfolder\nsave images into this folder (.svg or .png)\nadd a link in the README.md eg ![Modern Earth sensitivity study](images/modEarth_compare.png)","category":"page"},{"location":"HOWTOdocumentation/","page":"Creating and updating PALEO documentation","title":"Creating and updating PALEO documentation","text":"NB: please check file sizes, and think whether the extra size in the PALEO repository is justitifed...","category":"page"},{"location":"HOWTOdocumentation/#Adding-\"online\"-scripts-and-output","page":"Creating and updating PALEO documentation","title":"Adding \"online\" scripts and output","text":"","category":"section"},{"location":"HOWTOdocumentation/","page":"Creating and updating PALEO documentation","title":"Creating and updating PALEO documentation","text":"The PALEOtutorials repository exploits Documenter.jl syntax to add additional information in the README.md files to show the contents of files, and to run scripts and include text output and plots in the published web pages.","category":"page"},{"location":"HOWTOdocumentation/","page":"Creating and updating PALEO documentation","title":"Creating and updating PALEO documentation","text":"Examples from PALEOtutorials:","category":"page"},{"location":"HOWTOdocumentation/","page":"Creating and updating PALEO documentation","title":"Creating and updating PALEO documentation","text":"To show the content of files in a block in the rendered output:","category":"page"},{"location":"HOWTOdocumentation/","page":"Creating and updating PALEO documentation","title":"Creating and updating PALEO documentation","text":"```@eval\nimport Markdown\nMarkdown.parse(\n    \"\"\"```julia\n    $(read(joinpath(ENV[\"PALEO_EXAMPLES\"], \"ocean_chemistry/run_ex2.jl\"), String))\n    ```\"\"\"\n)\n```","category":"page"},{"location":"HOWTOdocumentation/","page":"Creating and updating PALEO documentation","title":"Creating and updating PALEO documentation","text":"NB: the ENV[\"PALEO_EXAMPLES\"] prefix to the path added with joinpath is key here, where ENV[\"PALEO_EXAMPLES\"] defines the full path to the examples/ folder. To read and display just part of a file, use:","category":"page"},{"location":"HOWTOdocumentation/","page":"Creating and updating PALEO documentation","title":"Creating and updating PALEO documentation","text":"```@eval\nimport Markdown\nMarkdown.parse(\n    \"\"\"```julia\n    $(join(readlines(joinpath(ENV[\"PALEO_EXAMPLES\"], \"ocean_chemistry/config_ex1.yaml\"); keep=true)[5:19]))  # only lines 5:19 from config_ex1.yaml\n    ```\"\"\"\n)\n```","category":"page"},{"location":"HOWTOdocumentation/","page":"Creating and updating PALEO documentation","title":"Creating and updating PALEO documentation","text":"To run a script and include output and figures:","category":"page"},{"location":"HOWTOdocumentation/","page":"Creating and updating PALEO documentation","title":"Creating and updating PALEO documentation","text":"```@example ex2\ninclude(joinpath(ENV[\"PALEO_EXAMPLES\"], \"ocean_chemistry/run_ex2.jl\")) # hide\nplot(paleorun.output, [\"ocean.TAlk_conc\", \"ocean.DIC_conc\"], (cell=1,); ylabel=\"TAlk, DIC conc (mol m-3)\") # hide\nsavefig(\"ex2_plot1.svg\"); nothing  # hide\nplot(paleorun.output, \"ocean.pH\", (cell=1,)) # hide\nsavefig(\"ex2_plot2.svg\"); nothing  # hide\nplot(paleorun.output, [\"ocean.DIC_conc\", \"ocean.HCO3_conc\", \"ocean.CO3_conc\", \"ocean.CO2_aq_conc\"], (cell=1,); ylabel=\"DIC species (mol m-3)\") # hide\nsavefig(\"ex2_plot3.svg\"); nothing  # hide\ndisplay(plot(paleorun.output, \"atm.pCO2atm\"))  # hide\nsavefig(\"ex2_plot4.svg\"); nothing  # hide\ndisplay(plot(paleorun.output, [\"global.C_total\", \"atm.CO2\", \"ocean.DIC_total\"]; ylabel=\"atm-ocean carbon (mol)\"))\nsavefig(\"ex2_plot5.svg\"); nothing  # hide\n```\n\n![](ex2_plot1.svg)\n![](ex2_plot2.svg)\n![](ex2_plot3.svg)\n![](ex2_plot4.svg)\n![](ex2_plot5.svg)","category":"page"},{"location":"HOWTOdocumentation/","page":"Creating and updating PALEO documentation","title":"Creating and updating PALEO documentation","text":"NB: to include plots produced by a script whilst keeping the script useful for interactive use, the plotting code has been duplicated in the .md file with additional options to save the figures to .svg files.","category":"page"},{"location":"HOWTOdocumentation/","page":"Creating and updating PALEO documentation","title":"Creating and updating PALEO documentation","text":"NB: if new code files defining PALEO reactions are required, create a doc_include.jl as described below.","category":"page"},{"location":"HOWTOdocumentation/","page":"Creating and updating PALEO documentation","title":"Creating and updating PALEO documentation","text":"To make new code files available to document code using docstrings and to make new PALEO reactions available for use in runnable scripts: create a doc_include.jl file in the example subfolder, which contains include(\"my_new_code_file.jl\") for each code file with new Reactions etc.","category":"page"},{"location":"References/#References","page":"References","title":"References","text":"","category":"section"},{"location":"References/","page":"References","title":"References","text":"Clarkson, M. O.; Stirling, C. H.; Jenkyns, H. C.; Dickson, A. J.; Porcelli, D.; Moy, C. M.; Pogge von Strandmann, P. A.; Cooke, I. R. and Lenton, T. M. (2018). Uranium isotope evidence for two episodes of deoxygenation during Oceanic Anoxic Event 2. Proceedings of the National Academy of Sciences 115, 2918–2923. Accessed on Sep 19, 2021.\n\n\n\nSarmiento, J. L. and Gruber, N. (2006). Ocean biogeochemical dynamics (Princeton University Press, Princeton). OCLC: ocm60651167.\n\n\n\nZeebe, R. E. and Wolf-Gladrow, D. a. (2001). CO2 in Seawater: Equilibrium, Kinetics, Isotopes (Elsevier).\n\n\n\nZhang, F.; Lenton, T. M.; del Rey, A.; Romaniello, S. J.; Chen, X.; Planavsky, N. J.; Clarkson, M. O.; Dahl, T. W.; Lau, K. V.; Wang, W.; Li, Z.; Zhao, M.; Isson, T.; Algeo, T. J. and Anbar, A. D. (2020). Uranium isotopes in marine carbonates as a global ocean paleoredox proxy: A critical review. Geochimica et Cosmochimica Acta 287, 27–49.\n\n\n\n","category":"page"},{"location":"HOWTOminimalGit/#Minimal-git-workflow-for-scientific-collaboration-and-reproducibility","page":"Minimal git workflow for scientific collaboration and reproducibility","title":"Minimal git workflow for scientific collaboration and reproducibility","text":"","category":"section"},{"location":"HOWTOminimalGit/","page":"Minimal git workflow for scientific collaboration and reproducibility","title":"Minimal git workflow for scientific collaboration and reproducibility","text":"There are many online resources for git (see eg https://git-scm.com/doc).","category":"page"},{"location":"HOWTOminimalGit/","page":"Minimal git workflow for scientific collaboration and reproducibility","title":"Minimal git workflow for scientific collaboration and reproducibility","text":"This HOWTO illustrates a minimal git workflow, sufficient to enable scientific collaboration:","category":"page"},{"location":"HOWTOminimalGit/","page":"Minimal git workflow for scientific collaboration and reproducibility","title":"Minimal git workflow for scientific collaboration and reproducibility","text":"install git\nfigure out github authentication\nclone PALEO repository\nchoose an existing branch to contribute to, or to use as a starting point with a new branch for your work\nmake changes and commit\npush the new branch to the PALEO repository\nfetch and merge changes made by a collaborator","category":"page"},{"location":"HOWTOminimalGit/","page":"Minimal git workflow for scientific collaboration and reproducibility","title":"Minimal git workflow for scientific collaboration and reproducibility","text":"This is already enough to enable collaboration by sharing model configurations and updates, and to archive configurations etc on github to provide reproducibility.","category":"page"},{"location":"HOWTOminimalGit/","page":"Minimal git workflow for scientific collaboration and reproducibility","title":"Minimal git workflow for scientific collaboration and reproducibility","text":"The key step here is to create a new branch: provided you do this, your changes won't interfere with anyone elses, and can be shared to github.","category":"page"},{"location":"HOWTOminimalGit/","page":"Minimal git workflow for scientific collaboration and reproducibility","title":"Minimal git workflow for scientific collaboration and reproducibility","text":"Much of the complexity of using git is dealing with what happens next in a software development context: how to merge and combine changes back into a single codebase. But this isn't essential for scientific collaboration. If needed, the next step is:","category":"page"},{"location":"HOWTOminimalGit/","page":"Minimal git workflow for scientific collaboration and reproducibility","title":"Minimal git workflow for scientific collaboration and reproducibility","text":"8.  Create a pull request on github.com to propose and collaborate on making changes to the core PALEO code.","category":"page"},{"location":"HOWTOminimalGit/#Install-git","page":"Minimal git workflow for scientific collaboration and reproducibility","title":"Install git","text":"","category":"section"},{"location":"HOWTOminimalGit/","page":"Minimal git workflow for scientific collaboration and reproducibility","title":"Minimal git workflow for scientific collaboration and reproducibility","text":"Download from https://git-scm.com/downloads","category":"page"},{"location":"HOWTOminimalGit/","page":"Minimal git workflow for scientific collaboration and reproducibility","title":"Minimal git workflow for scientific collaboration and reproducibility","text":"This HOWTO uses a minimum installation of the command line git tools. Other tools are available, including GUIs. Git is also built-in to VS Code.","category":"page"},{"location":"HOWTOminimalGit/","page":"Minimal git workflow for scientific collaboration and reproducibility","title":"Minimal git workflow for scientific collaboration and reproducibility","text":"To get basic help for the command line tools:","category":"page"},{"location":"HOWTOminimalGit/","page":"Minimal git workflow for scientific collaboration and reproducibility","title":"Minimal git workflow for scientific collaboration and reproducibility","text":"git help","category":"page"},{"location":"HOWTOminimalGit/#Github-authentication","page":"Minimal git workflow for scientific collaboration and reproducibility","title":"Github authentication","text":"","category":"section"},{"location":"HOWTOminimalGit/","page":"Minimal git workflow for scientific collaboration and reproducibility","title":"Minimal git workflow for scientific collaboration and reproducibility","text":"There are (since ~mid 2021) now two steps needed:","category":"page"},{"location":"HOWTOminimalGit/","page":"Minimal git workflow for scientific collaboration and reproducibility","title":"Minimal git workflow for scientific collaboration and reproducibility","text":"github.com website uses username/password\ncode access requires a 'Personal Access Token' (PAT) https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token NB: not all git tools are updated to reflect this, and will prompt for 'password' where what they need is 'PAT'.","category":"page"},{"location":"HOWTOminimalGit/#Clone-github-repository","page":"Minimal git workflow for scientific collaboration and reproducibility","title":"Clone github repository","text":"","category":"section"},{"location":"HOWTOminimalGit/","page":"Minimal git workflow for scientific collaboration and reproducibility","title":"Minimal git workflow for scientific collaboration and reproducibility","text":"To download https://github.com/PALEOtoolkit/PALEOdev.jl into a new folder PALEOjulia:","category":"page"},{"location":"HOWTOminimalGit/","page":"Minimal git workflow for scientific collaboration and reproducibility","title":"Minimal git workflow for scientific collaboration and reproducibility","text":"git clone https://github.com/PALEOtoolkit/PALEOdev.jl PALEOjulia","category":"page"},{"location":"HOWTOminimalGit/","page":"Minimal git workflow for scientific collaboration and reproducibility","title":"Minimal git workflow for scientific collaboration and reproducibility","text":"See above for PAT, not password. ","category":"page"},{"location":"HOWTOminimalGit/#Create-branch","page":"Minimal git workflow for scientific collaboration and reproducibility","title":"Create branch","text":"","category":"section"},{"location":"HOWTOminimalGit/","page":"Minimal git workflow for scientific collaboration and reproducibility","title":"Minimal git workflow for scientific collaboration and reproducibility","text":"Change directory to 'PALEOjulia', then:","category":"page"},{"location":"HOWTOminimalGit/","page":"Minimal git workflow for scientific collaboration and reproducibility","title":"Minimal git workflow for scientific collaboration and reproducibility","text":"To show the current branch ('master'):","category":"page"},{"location":"HOWTOminimalGit/","page":"Minimal git workflow for scientific collaboration and reproducibility","title":"Minimal git workflow for scientific collaboration and reproducibility","text":"git status","category":"page"},{"location":"HOWTOminimalGit/","page":"Minimal git workflow for scientific collaboration and reproducibility","title":"Minimal git workflow for scientific collaboration and reproducibility","text":"To show all branches in the repository:","category":"page"},{"location":"HOWTOminimalGit/","page":"Minimal git workflow for scientific collaboration and reproducibility","title":"Minimal git workflow for scientific collaboration and reproducibility","text":"git branch -a","category":"page"},{"location":"HOWTOminimalGit/","page":"Minimal git workflow for scientific collaboration and reproducibility","title":"Minimal git workflow for scientific collaboration and reproducibility","text":"or to just show existing local branches:","category":"page"},{"location":"HOWTOminimalGit/","page":"Minimal git workflow for scientific collaboration and reproducibility","title":"Minimal git workflow for scientific collaboration and reproducibility","text":"git branch","category":"page"},{"location":"HOWTOminimalGit/","page":"Minimal git workflow for scientific collaboration and reproducibility","title":"Minimal git workflow for scientific collaboration and reproducibility","text":"To create a local branch corresponding to an existing branch on github (synchronized via a 'remote tracking branch'):","category":"page"},{"location":"HOWTOminimalGit/","page":"Minimal git workflow for scientific collaboration and reproducibility","title":"Minimal git workflow for scientific collaboration and reproducibility","text":"git checkout -b <existing branch> --track origin/<existing branch>","category":"page"},{"location":"HOWTOminimalGit/","page":"Minimal git workflow for scientific collaboration and reproducibility","title":"Minimal git workflow for scientific collaboration and reproducibility","text":"(this is needed eg if you clone the github.com repository to a new folder, and then want to contribute to or start from an existing branch)","category":"page"},{"location":"HOWTOminimalGit/","page":"Minimal git workflow for scientific collaboration and reproducibility","title":"Minimal git workflow for scientific collaboration and reproducibility","text":"To change to an existing local branch:","category":"page"},{"location":"HOWTOminimalGit/","page":"Minimal git workflow for scientific collaboration and reproducibility","title":"Minimal git workflow for scientific collaboration and reproducibility","text":"git checkout <existing branch>","category":"page"},{"location":"HOWTOminimalGit/","page":"Minimal git workflow for scientific collaboration and reproducibility","title":"Minimal git workflow for scientific collaboration and reproducibility","text":"To create a new branch for your work (branching from the current branch), and then check it out:","category":"page"},{"location":"HOWTOminimalGit/","page":"Minimal git workflow for scientific collaboration and reproducibility","title":"Minimal git workflow for scientific collaboration and reproducibility","text":"git branch <my new branch>\ngit checkout <my new branch>","category":"page"},{"location":"HOWTOminimalGit/#Commit-changes","page":"Minimal git workflow for scientific collaboration and reproducibility","title":"Commit changes","text":"","category":"section"},{"location":"HOWTOminimalGit/","page":"Minimal git workflow for scientific collaboration and reproducibility","title":"Minimal git workflow for scientific collaboration and reproducibility","text":"To add modified or new files:","category":"page"},{"location":"HOWTOminimalGit/","page":"Minimal git workflow for scientific collaboration and reproducibility","title":"Minimal git workflow for scientific collaboration and reproducibility","text":"git add <modified and new files>","category":"page"},{"location":"HOWTOminimalGit/","page":"Minimal git workflow for scientific collaboration and reproducibility","title":"Minimal git workflow for scientific collaboration and reproducibility","text":"To check everything added:","category":"page"},{"location":"HOWTOminimalGit/","page":"Minimal git workflow for scientific collaboration and reproducibility","title":"Minimal git workflow for scientific collaboration and reproducibility","text":"git status","category":"page"},{"location":"HOWTOminimalGit/","page":"Minimal git workflow for scientific collaboration and reproducibility","title":"Minimal git workflow for scientific collaboration and reproducibility","text":"To commit changes:","category":"page"},{"location":"HOWTOminimalGit/","page":"Minimal git workflow for scientific collaboration and reproducibility","title":"Minimal git workflow for scientific collaboration and reproducibility","text":"git commit -m \"add a useful summary of changes here\"","category":"page"},{"location":"HOWTOminimalGit/#Push-changes-to-github","page":"Minimal git workflow for scientific collaboration and reproducibility","title":"Push changes to github","text":"","category":"section"},{"location":"HOWTOminimalGit/","page":"Minimal git workflow for scientific collaboration and reproducibility","title":"Minimal git workflow for scientific collaboration and reproducibility","text":"To push changes in the current branch to github:","category":"page"},{"location":"HOWTOminimalGit/","page":"Minimal git workflow for scientific collaboration and reproducibility","title":"Minimal git workflow for scientific collaboration and reproducibility","text":"git push","category":"page"},{"location":"HOWTOminimalGit/","page":"Minimal git workflow for scientific collaboration and reproducibility","title":"Minimal git workflow for scientific collaboration and reproducibility","text":"if you then go to https://github.com/PALEOtoolkit/PALEOdev.jl you should see that your branch is there.","category":"page"},{"location":"HOWTOminimalGit/#Fetch-and-merge-changes-made-by-a-collaborator","page":"Minimal git workflow for scientific collaboration and reproducibility","title":"Fetch and merge changes made by a collaborator","text":"","category":"section"},{"location":"HOWTOminimalGit/","page":"Minimal git workflow for scientific collaboration and reproducibility","title":"Minimal git workflow for scientific collaboration and reproducibility","text":"To fetch from github and merge changes made by a collaborator in your branch:","category":"page"},{"location":"HOWTOminimalGit/","page":"Minimal git workflow for scientific collaboration and reproducibility","title":"Minimal git workflow for scientific collaboration and reproducibility","text":"git pull","category":"page"},{"location":"HOWTOminimalGit/","page":"Minimal git workflow for scientific collaboration and reproducibility","title":"Minimal git workflow for scientific collaboration and reproducibility","text":"note this combines two lower-level git operations: git fetch to fetch changes from github into a local remote-tracking branch, and  git merge to merge those changes into the current branch.","category":"page"},{"location":"HOWTOminimalGit/#Optional:-create-a-pull-request-on-github","page":"Minimal git workflow for scientific collaboration and reproducibility","title":"Optional: create a pull request on github","text":"","category":"section"},{"location":"HOWTOminimalGit/","page":"Minimal git workflow for scientific collaboration and reproducibility","title":"Minimal git workflow for scientific collaboration and reproducibility","text":"See the github.com docs for Creating a pull request.","category":"page"},{"location":"HOWTOminimalGit/","page":"Minimal git workflow for scientific collaboration and reproducibility","title":"Minimal git workflow for scientific collaboration and reproducibility","text":"This makes it straightforward to propose and collaborate on making changes to the core PALEO code.","category":"page"},{"location":"collated_examples/NAPC_tutorial/README/#Shelf-Sea-Tutorial","page":"Shelf Sea Tutorial","title":"Shelf Sea Tutorial","text":"","category":"section"},{"location":"collated_examples/NAPC_tutorial/README/","page":"Shelf Sea Tutorial","title":"Shelf Sea Tutorial","text":"Example files needed for running a ocean-only shelf sea configurations based on S2P3 dynamics for a Nutirent-Phytoplankton-Zooplankton system tracking phosphorous and oxygen.","category":"page"},{"location":"HOWTOadditionalconfig/#Optional-additional-configuration","page":"Optional additional configuration","title":"Optional additional configuration","text":"","category":"section"},{"location":"HOWTOadditionalconfig/#Local-paths-in-LocalPreferences.toml","page":"Optional additional configuration","title":"Local paths in LocalPreferences.toml","text":"","category":"section"},{"location":"HOWTOadditionalconfig/","page":"Optional additional configuration","title":"Optional additional configuration","text":"PALEO uses Julia Preferences.jl to simplify configuration for data files that are not part of the PALEO repo hence may be in a different location on the local machine.","category":"page"},{"location":"HOWTOadditionalconfig/","page":"Optional additional configuration","title":"Optional additional configuration","text":"Any Parameter value string in $ $ eg $SomePath$ will be substituted with the value of the key SomePath read from the LocalPreferences.toml file in the top-level folder for the current environment (eg PALEOexamples/LocalPreferences.toml).","category":"page"},{"location":"HOWTOadditionalconfig/","page":"Optional additional configuration","title":"Optional additional configuration","text":"Currently this mechanism is used to define paths for external data files for ocean transport, via the keys S2P3TransportDir, GENIETransportDir, TMMDir.","category":"page"},{"location":"HOWTOadditionalconfig/#Configuring-for-Julia-python-interoperability","page":"Optional additional configuration","title":"Configuring for Julia - python interoperability","text":"","category":"section"},{"location":"HOWTOadditionalconfig/","page":"Optional additional configuration","title":"Optional additional configuration","text":"Julia interoperability with Python is provided by the PythonCall.jl package in the JuliaPy github organisation. This is now recommended over the earlier PyCall.jl package.","category":"page"},{"location":"HOWTOadditionalconfig/","page":"Optional additional configuration","title":"Optional additional configuration","text":"See https://juliapy.github.io/PythonCall.jl/stable/pythoncall/#pythoncall-config for configuration options to either use an existing python install from Julia, or to let Julia install it's own copy of python.","category":"page"},{"location":"HOWTOadditionalconfig/#Jupyter-notebooks","page":"Optional additional configuration","title":"Jupyter notebooks","text":"","category":"section"},{"location":"HOWTOadditionalconfig/","page":"Optional additional configuration","title":"Optional additional configuration","text":"The Julia language (like Python and R, unlike Matlab) can use multiple different development workflows, including the Jupyter environment and notebooks via the IJulia package (this is the 'Ju' in Jupyter https://blog.jupyter.org/i-python-you-r-we-julia-baf064ca1fb6).","category":"page"},{"location":"HOWTOadditionalconfig/","page":"Optional additional configuration","title":"Optional additional configuration","text":"Using Jupyter notebooks does however introduce a dependency on Python. The most reliable way to get this working is to ask IJulia to install its own Conda-based version of Python and Jupyter (see https://julialang.github.io/IJulia.jl/stable/):","category":"page"},{"location":"HOWTOadditionalconfig/","page":"Optional additional configuration","title":"Optional additional configuration","text":"julia> using Pkg   # the Julia package manager\njulia> pwd()    # check we are in the top-level PALEO.jl folder\n\"E:\\\\software\\\\julia\\\\PALEOjulia\"       \njulia> Pkg.activate(\"PALEOexamples\")  # activate the PALEOexamples environment\njulia> ENV[\"JUPYTER\"]=\"\"; Pkg.build(\"IJulia\")  # force IJulia to use its own Conda-based Jupyter version\njulia> using IJulia  \njulia> notebook(dir=pwd(), detached=true)  # Prompt to install Jupyter, launch an IJulia notebook in your browser","category":"page"},{"location":"HOWTOadditionalconfig/","page":"Optional additional configuration","title":"Optional additional configuration","text":"See Configuring for Julia - python interoperability for setup details including how to use an external Python installation.","category":"page"},{"location":"HOWTOadditionalconfig/#Plotting","page":"Optional additional configuration","title":"Plotting","text":"","category":"section"},{"location":"HOWTOadditionalconfig/","page":"Optional additional configuration","title":"Optional additional configuration","text":"Julia has multiple plot backends, and these can either use a standalone window or display \"inline\" to the VS code plot panel (or Jupyter notebook).","category":"page"},{"location":"HOWTOadditionalconfig/#VS-code-plot-panel","page":"Optional additional configuration","title":"VS code plot panel","text":"","category":"section"},{"location":"HOWTOadditionalconfig/","page":"Optional additional configuration","title":"Optional additional configuration","text":"Enable/disable the VS code plot panel with the Julia: Use plot panel checkbox in VS code settings (search for Julia). If disabled, plotting will use a standalone window.","category":"page"},{"location":"HOWTOadditionalconfig/#GR-backend","page":"Optional additional configuration","title":"GR backend","text":"","category":"section"},{"location":"HOWTOadditionalconfig/#VS-code","page":"Optional additional configuration","title":"VS code","text":"","category":"section"},{"location":"HOWTOadditionalconfig/","page":"Optional additional configuration","title":"Optional additional configuration","text":"Enlarging VS plot window using default GR backend: julia> using Plots; gr(size = (750, 565))","category":"page"},{"location":"HOWTOadditionalconfig/#Standalone","page":"Optional additional configuration","title":"Standalone","text":"","category":"section"},{"location":"HOWTOadditionalconfig/","page":"Optional additional configuration","title":"Optional additional configuration","text":"The standalone GR plot window (if not using VS code plot panel) can only display one plot in one window, so not recommended.","category":"page"},{"location":"HOWTOadditionalconfig/#PlotlyJS-backend","page":"Optional additional configuration","title":"PlotlyJS backend","text":"","category":"section"},{"location":"HOWTOadditionalconfig/#VS-code-2","page":"Optional additional configuration","title":"VS code","text":"","category":"section"},{"location":"HOWTOadditionalconfig/","page":"Optional additional configuration","title":"Optional additional configuration","text":"Using PlotlyJS backend in VS code: julia> using Plots; plotlyjs(size=(750, 565)). ","category":"page"},{"location":"HOWTOadditionalconfig/#Standalone-2","page":"Optional additional configuration","title":"Standalone","text":"","category":"section"},{"location":"HOWTOadditionalconfig/","page":"Optional additional configuration","title":"Optional additional configuration","text":"See https://github.com/JuliaPlots/PlotlyJS.jl for note on Blink install.","category":"page"},{"location":"HOWTOadditionalconfig/#Pyplot-backend","page":"Optional additional configuration","title":"Pyplot backend","text":"","category":"section"},{"location":"HOWTOadditionalconfig/","page":"Optional additional configuration","title":"Optional additional configuration","text":"This requires the Python Matplotlib library, see https://github.com/JuliaPy/PyPlot.jl for installation instructions. The simplest configuration is for Julia to install a private (not system provided) Python distribution.  On linux, this requires that you set ENV[\"PYTHON\"]=\"\" before adding PyPlot:","category":"page"},{"location":"HOWTOadditionalconfig/","page":"Optional additional configuration","title":"Optional additional configuration","text":"julia> ENV[\"PYTHON\"]=\"\" \njulia> Pkg.add(\"PyPlot\")  # will automatically install python Matplotlib etc as needed and the Qt backend","category":"page"},{"location":"HOWTOadditionalconfig/","page":"Optional additional configuration","title":"Optional additional configuration","text":"or if PyPlot is already installed but failing with a system Python,","category":"page"},{"location":"HOWTOadditionalconfig/","page":"Optional additional configuration","title":"Optional additional configuration","text":"julia> ENV[\"PYTHON\"]=\"\" \njulia> Pkg.build(\"PyCall\")  # will rebuild to use private Python install, and install Matplotlib next time PyPlot is imported.","category":"page"},{"location":"HOWTOadditionalconfig/","page":"Optional additional configuration","title":"Optional additional configuration","text":"See Configuring for Julia - python interoperability for setup details including how to use an external Python installation.","category":"page"},{"location":"HOWTOadditionalconfig/#VS-code-3","page":"Optional additional configuration","title":"VS code","text":"","category":"section"},{"location":"HOWTOadditionalconfig/","page":"Optional additional configuration","title":"Optional additional configuration","text":"Using pyplot backend in VS code: julia> using Plots; pyplot()","category":"page"},{"location":"HOWTOadditionalconfig/#Standalone-3","page":"Optional additional configuration","title":"Standalone","text":"","category":"section"},{"location":"HOWTOadditionalconfig/","page":"Optional additional configuration","title":"Optional additional configuration","text":"On linux, install process above will use the Qt backend by default, see https://github.com/JuliaPy/PyPlot.jl for instructions for MacOS.","category":"page"},{"location":"HOWTOadditionalconfig/#SIMD-vectorized-math-functions","page":"Optional additional configuration","title":"SIMD vectorized math functions","text":"","category":"section"},{"location":"HOWTOadditionalconfig/","page":"Optional additional configuration","title":"Optional additional configuration","text":"By default, Julia (as of version 1.6) will fall back to slow scalar functions for SIMD exp, log etc, which has a big (x2) impact on the speed of carbonate chemistry and hence run time for large (GENIE size) models that use many small fixed timesteps. As a workaround, PALEO will use the sleef library (https://sleef.org) for fast vectorized versions, supplied by the SLEEF_jll.jl package.  This can be disabled by setting USE_SLEEF = false in LocalPreferences.toml and restarting the Julia REPL.","category":"page"},{"location":"HOWTOJuliaUsage/#Julia-and-VS-code-usage","page":"Julia and VS code usage","title":"Julia and VS code usage","text":"","category":"section"},{"location":"HOWTOJuliaUsage/#Julia-resources","page":"Julia and VS code usage","title":"Julia resources","text":"","category":"section"},{"location":"HOWTOJuliaUsage/","page":"Julia and VS code usage","title":"Julia and VS code usage","text":"Julia homepage https://julialang.org/ (see links to Documentation and a curated list of tutorials, books, etc under Learn)\nJulia cheatsheet: https://juliadocs.github.io/Julia-Cheat-Sheet\nMatlab-Python-Julia cheatsheet: https://cheatsheets.quantecon.org (NB: the first example on Creating Vectors is misleading - use 1d Arrays in Julia!)","category":"page"},{"location":"HOWTOJuliaUsage/#Always-use-Revise.jl","page":"Julia and VS code usage","title":"Always use Revise.jl","text":"","category":"section"},{"location":"HOWTOJuliaUsage/","page":"Julia and VS code usage","title":"Julia and VS code usage","text":"This tracks changes and automatically updates code run from a REPL session.","category":"page"},{"location":"HOWTOJuliaUsage/","page":"Julia and VS code usage","title":"Julia and VS code usage","text":"julia> using Revise","category":"page"},{"location":"HOWTOJuliaUsage/","page":"Julia and VS code usage","title":"Julia and VS code usage","text":"VS code has an option to automatically load Revise.jl at startup (enabled by default).","category":"page"},{"location":"HOWTOJuliaUsage/#Use-Infiltrator.jl-for-debugging","page":"Julia and VS code usage","title":"Use Infiltrator.jl for debugging","text":"","category":"section"},{"location":"HOWTOJuliaUsage/","page":"Julia and VS code usage","title":"Julia and VS code usage","text":"https://github.com/JuliaDebug/Infiltrator.jl","category":"page"},{"location":"HOWTOJuliaUsage/","page":"Julia and VS code usage","title":"Julia and VS code usage","text":"The Debugger.jl built in to VSCode is an interpreter (Interpreter.jl), and is unusably slow for PALEO.","category":"page"},{"location":"HOWTOJuliaUsage/#Install-the-VS-code-yaml-extension","page":"Julia and VS code usage","title":"Install the VS code yaml extension","text":"","category":"section"},{"location":"HOWTOJuliaUsage/","page":"Julia and VS code usage","title":"Julia and VS code usage","text":"A VS code yaml extension is now available, https://marketplace.visualstudio.com/items?itemName=redhat.vscode-yaml, this will flag errors in the PALEO yaml configuration files when opened in the VS code editor.","category":"page"},{"location":"HOWTOJuliaUsage/","page":"Julia and VS code usage","title":"Julia and VS code usage","text":"NB: The Julia YAML.jl parser allows duplicate keys (later key overwrites earlier) https://github.com/PALEOtoolkit/PALEOboxes.jl/issues/43. This is easy to hit when generating model configurations, the VS code yaml linter will catch this and other errors. If all else fails, check the .yaml file using an online validator eg http://www.yamllint.com/.","category":"page"},{"location":"HOWTOJuliaUsage/#Julia-best-practices","page":"Julia and VS code usage","title":"Julia best practices","text":"","category":"section"},{"location":"HOWTOJuliaUsage/","page":"Julia and VS code usage","title":"Julia and VS code usage","text":"Performance tips: https://docs.julialang.org/en/v1/manual/performance-tips/\nJulia antipatterns: https://www.oxinabox.net/2020/04/19/Julia-Antipatterns.html\nBatch usage: https://github.com/CliMA/ClimateMachine.jl/wiki/Caltech-Central-Cluster","category":"page"},{"location":"HOWTOJuliaUsage/#Julia-bugs/gotchas","page":"Julia and VS code usage","title":"Julia bugs/gotchas","text":"","category":"section"},{"location":"HOWTOJuliaUsage/","page":"Julia and VS code usage","title":"Julia and VS code usage","text":"Continuation lines in multi-line formulas can silently fail (this is easy to hit when copying across Fortran code). Workaround - add brackets.\nDebug in VSCode is very slow. Use Infiltrator.jl instead.\nLegends on subplots are merged with some backends eg plotlyjs (https://github.com/JuliaPlots/Plots.jl/issues/673). Workaround - use a different backend for multiple-panel plots.\njldoctest fails if there is an initial blank line (apparent off-by-one in input and validation output). TODO report.","category":"page"},{"location":"HOWTOJuliaUsage/#Julia-performance-issues/gotchas","page":"Julia and VS code usage","title":"Julia performance issues/gotchas","text":"","category":"section"},{"location":"HOWTOJuliaUsage/","page":"Julia and VS code usage","title":"Julia and VS code usage","text":"NB: the only place this matters in PALEO is for the model main loop.  Everything else is non-performance critical.  The PALEOboxes.TestUtils.bench_model function provides a convenient way of benchmarking a model and identifying problem Reactions (where all Reactions in the registered PALEO packages should have zero allocations).","category":"page"},{"location":"HOWTOJuliaUsage/","page":"Julia and VS code usage","title":"Julia and VS code usage","text":"It is easy to write code which is 'type unstable', or generates memory allocations, which then gives low performance, see 'Performance tips' above.\nIterating over tuples: really need a foreach that is optimised eg https://github.com/JuliaLang/julia/issues/31869, https://discourse.julialang.org/t/manually-unroll-operations-with-objects-of-tuple/11604. PALEO provides PALEOboxes.foreach_longtuple.\n@views for sparse matrices reverts to slow (dense) pathways (https://stackoverflow.com/questions/58699267/julia-view-of-sparse-matrix, https://github.com/JuliaLang/julia/issues/21796) (update - much improved in Julia 1.6 according to updates to these posts)\nSIMD.jl is missing optimized vectorized intrinsics (exp, log etc). PALEO provides workaround ins PALEOboxes.SIMDutils.jl, implemented using SLEEF.","category":"page"},{"location":"collated_examples/configurable_chemistry/README/#Configurable-chemistry-using-PALEOaqchem","page":"Configurable chemistry using PALEOaqchem","title":"Configurable chemistry using PALEOaqchem","text":"","category":"section"},{"location":"collated_examples/configurable_chemistry/README/","page":"Configurable chemistry using PALEOaqchem","title":"Configurable chemistry using PALEOaqchem","text":"These examples illustrate how to use the yaml configuration file to configure generic chemistry Reactions from PALEOaqchem to implement the same minimal model of the marine carbonate system shown in the Ocean chemistry examples.","category":"page"},{"location":"collated_examples/configurable_chemistry/README/","page":"Configurable chemistry using PALEOaqchem","title":"Configurable chemistry using PALEOaqchem","text":"See PALEOaqchem documentation for more detail on the generic aqueous chemistry.","category":"page"},{"location":"collated_examples/configurable_chemistry/README/","page":"Configurable chemistry using PALEOaqchem","title":"Configurable chemistry using PALEOaqchem","text":"See PALEOmodel documentation for more information on analysing model output.","category":"page"},{"location":"collated_examples/configurable_chemistry/README/#Example-1-Configuring-a-minimal-Alk-pH-model","page":"Configurable chemistry using PALEOaqchem","title":"Example 1 Configuring a minimal Alk-pH model","text":"","category":"section"},{"location":"collated_examples/configurable_chemistry/README/","page":"Configurable chemistry using PALEOaqchem","title":"Configurable chemistry using PALEOaqchem","text":"This example configures generic chemistry reactions from PALEOaqchem to define a minimal Alk-pH model for aqueous carbonate chemistry. Carbonate system equations are from (Zeebe and Wolf-Gladrow, 2001).","category":"page"},{"location":"collated_examples/configurable_chemistry/README/","page":"Configurable chemistry using PALEOaqchem","title":"Configurable chemistry using PALEOaqchem","text":"The ocean domain contains a ReactionNoTransport from the PALEOocean Julia package.  This defines standard ocean variables including cell volume, and is configured here to provide one ocean cell.","category":"page"},{"location":"collated_examples/configurable_chemistry/README/","page":"Configurable chemistry using PALEOaqchem","title":"Configurable chemistry using PALEOaqchem","text":"There are two state variables for DIC and TAlk, implemented using a ReactionReservoir from the PALEOboxes Julia package. This Reaction also provides concentrations in mol m-3.  Constant Boron concentration B_conc is defined using a ReactionReservoirConst.","category":"page"},{"location":"collated_examples/configurable_chemistry/README/","page":"Configurable chemistry using PALEOaqchem","title":"Configurable chemistry using PALEOaqchem","text":"The carbonate chemistry system includes the speciation of water, boron and DIC. B, DIC, and TAlk are the three total variables with corresponding primary species concentrations BOH3_conc, CO2_aq_conc, and H_conc (defined by pH). Primary species are defined using the PALEOaqchem ReactionConstraintReservoir, which defines a state variable  (attribute :vfunction = PB.VF_State) eg BOH3_conc, an algebraic constraint for the corresponding total eg B_constraint_conc (with attribute :vfunction = PB.VF_Constraint), and a variable eg B_calc to accumulate primary and secondary species contributions. Secondary species eg BOH4 are defined using the PALEOaqchem ReactionAqEqb, and their contribution added to the calculated total eg B_calc. The PALEO DAE solver then solves for the primary species concentration BOH3_conc that makes B_calc equal to the required value B. Note that the ReactionConstraintReservoir for TAlk defines pH as the state variable (from which H_conc is calculated), and that many species contribute to both TAlk_calc and their own total.","category":"page"},{"location":"collated_examples/configurable_chemistry/README/","page":"Configurable chemistry using PALEOaqchem","title":"Configurable chemistry using PALEOaqchem","text":"The combined system is then a Differential Algebraic Equation (DAE) system with two ODE state variables and corresponding time derivatives for DIC and TAlk, three algebraic constraints for B, DIC, and TAlk, and three additional state variables for the primary species BOH3_conc, CO2_aq_conc, and pH, and is integrated forward in time by a DAE solver PALEOmodel.ODE.integrateDAE.","category":"page"},{"location":"collated_examples/configurable_chemistry/README/#yaml-configuration-file","page":"Configurable chemistry using PALEOaqchem","title":"yaml configuration file","text":"","category":"section"},{"location":"collated_examples/configurable_chemistry/README/","page":"Configurable chemistry using PALEOaqchem","title":"Configurable chemistry using PALEOaqchem","text":"The model configuration (file examples/configurable_chemistry/config_ex1.yaml) contains two Reservoirs DIC, TAlk.","category":"page"},{"location":"collated_examples/configurable_chemistry/README/","page":"Configurable chemistry using PALEOaqchem","title":"Configurable chemistry using PALEOaqchem","text":"A ReactionFluxPerturb from the PALEOboxes.jl reaction catalog is used to add a constant TAlk flux.","category":"page"},{"location":"collated_examples/configurable_chemistry/README/","page":"Configurable chemistry using PALEOaqchem","title":"Configurable chemistry using PALEOaqchem","text":"import Markdown\nMarkdown.parse(\n    \"\"\"```julia\n    $(read(joinpath(ENV[\"PALEO_EXAMPLES\"], \"configurable_chemistry/config_ex1.yaml\"), String))\n    ```\"\"\"\n)","category":"page"},{"location":"collated_examples/configurable_chemistry/README/#Run-script","page":"Configurable chemistry using PALEOaqchem","title":"Run script","text":"","category":"section"},{"location":"collated_examples/configurable_chemistry/README/","page":"Configurable chemistry using PALEOaqchem","title":"Configurable chemistry using PALEOaqchem","text":"The script to run the model (file examples/configurable_chemistry/run_ex1.jl) contains:","category":"page"},{"location":"collated_examples/configurable_chemistry/README/","page":"Configurable chemistry using PALEOaqchem","title":"Configurable chemistry using PALEOaqchem","text":"import Markdown\nMarkdown.parse(\n    \"\"\"```julia\n    $(read(joinpath(ENV[\"PALEO_EXAMPLES\"], \"configurable_chemistry/run_ex1.jl\"), String))\n    ```\"\"\"\n)","category":"page"},{"location":"collated_examples/configurable_chemistry/README/","page":"Configurable chemistry using PALEOaqchem","title":"Configurable chemistry using PALEOaqchem","text":"and produces output showing the change, if TAlk_conc increase, how the carbonic acid and pH change in ocean:","category":"page"},{"location":"collated_examples/configurable_chemistry/README/","page":"Configurable chemistry using PALEOaqchem","title":"Configurable chemistry using PALEOaqchem","text":"include(joinpath(ENV[\"PALEO_EXAMPLES\"], \"configurable_chemistry/run_ex1.jl\")) # hide\nplot(paleorun.output, [\"ocean.TAlk_conc\", \"ocean.DIC_conc\"],                                           (cell=1,); ylabel=\"TAlk, DIC conc (mol m-3)\") # hide\nsavefig(\"ex1_plot1.svg\"); nothing  # hide\nplot(paleorun.output, \"ocean.pH\",                                                                      (cell=1,)) # hide\nsavefig(\"ex1_plot2.svg\"); nothing  # hide\nplot(paleorun.output, [\"ocean.DIC_conc\", \"ocean.HCO3_conc\", \"ocean.CO3_conc\", \"ocean.CO2_aq_conc\"],    (cell=1,); ylabel=\"DIC species (mol m-3)\") # hide\nsavefig(\"ex1_plot3.svg\"); nothing  # hide\ndisplay(  # hide\n    plot(  # hide\n        paleorun.output,   # hide\n        [\"ocean.HCO3_conc\", \"ocean.CO3_conc\", \"ocean.CO2_aq_conc\", \"ocean.BOH4_conc\", \"ocean.BOH3_conc\",  \"ocean.H_conc\", \"ocean.OH_conc\",],  # hide\n        (cell=1, ); # hide\n        coords=[\"tmodel\"=>(\"ocean.pH\",),], # plot against pH instead of tmodel  # hide\n        ylabel=\"H2O, B, DIC species (mol m-3)\", ylim=(0.5e-3, 0.5e1), yscale=:log10,  # hide\n        legend_background_color=nothing,  # hide\n        legend=:bottom,  # hide\n    )  # hide\n)  # hide\nsavefig(\"ex1_plot4.svg\"); nothing  # hide","category":"page"},{"location":"collated_examples/configurable_chemistry/README/","page":"Configurable chemistry using PALEOaqchem","title":"Configurable chemistry using PALEOaqchem","text":"(Image: ) (Image: ) (Image: ) (Image: )","category":"page"},{"location":"collated_examples/configurable_chemistry/README/#Displaying-model-structure-and-variables","page":"Configurable chemistry using PALEOaqchem","title":"Displaying model structure and variables","text":"","category":"section"},{"location":"collated_examples/configurable_chemistry/README/","page":"Configurable chemistry using PALEOaqchem","title":"Configurable chemistry using PALEOaqchem","text":"All metadata for model variables can be displayed with PB.show_variables:","category":"page"},{"location":"collated_examples/configurable_chemistry/README/","page":"Configurable chemistry using PALEOaqchem","title":"Configurable chemistry using PALEOaqchem","text":"show(PB.show_variables(model), allcols=true, allrows=true) # display in REPL\n# vscodedisplay(PB.show_variables(model)) # more convenient when using VS code","category":"page"},{"location":"collated_examples/configurable_chemistry/README/#Example-2-Minimal-Alk-pH-model-with-implicit-variables","page":"Configurable chemistry using PALEOaqchem","title":"Example 2 Minimal Alk-pH model with implicit variables","text":"","category":"section"},{"location":"collated_examples/configurable_chemistry/README/","page":"Configurable chemistry using PALEOaqchem","title":"Configurable chemistry using PALEOaqchem","text":"This example contains the same chemistry as Example 1 Configuring a minimal Alk-pH model, using the Direct Substitution Approach (DSA) to eliminate the two algebraic equations corresponding to the mass action equations for DIC and TAlk.","category":"page"},{"location":"collated_examples/configurable_chemistry/README/","page":"Configurable chemistry using PALEOaqchem","title":"Configurable chemistry using PALEOaqchem","text":"The state variables for DIC_conc and TAlk_conc are now implicit total variables defined by PALEOaqchem ReactionImplicitReservoirs. These define a PALEO Total variable  (attribute :vfunction = PB.VF_Total) eg DIC_conc which is a function of a primary species concentration implemented as a PALEO StateTotal variable (attribute :vfunction = PB.VF_StateTotal) eg CO_2_aq_conc, and a time derivative eg DIC_conc_sms implemented as a PALEO Deriv variable (attribute :vfunction = PB.VF_Deriv).","category":"page"},{"location":"collated_examples/configurable_chemistry/README/","page":"Configurable chemistry using PALEOaqchem","title":"Configurable chemistry using PALEOaqchem","text":"The combined system is then a Differential Algebraic Equation (DAE) system with three implicit total variables for DIC_conc, B_conc, and TAlk_conc, with corresponding time derivatives DIC_conc_sms, B_conc_sms, and TAlk_conc_sms and state variables for the primary species CO2_aq_conc, BOH3_conc and pH, and is integrated forward in time by a DAE solver PALEOmodel.ODE.integrateDAE.","category":"page"},{"location":"collated_examples/configurable_chemistry/README/","page":"Configurable chemistry using PALEOaqchem","title":"Configurable chemistry using PALEOaqchem","text":"Notes:","category":"page"},{"location":"collated_examples/configurable_chemistry/README/","page":"Configurable chemistry using PALEOaqchem","title":"Configurable chemistry using PALEOaqchem","text":"The combination of constant BOH3_conc and a ReactionConstraintReservoir defining primary species BOH3_conc has been replaced with an implicit state variable for B_conc and primary species BOH3_conc: this is required to use the IDA DAE solver, which cannot handle initialisation of that combination of implicit and constraint variables (see PALEOmodel documentation).\nInitial values are now specified for the primary species (eg CO2_conc, BOH3_conc, pH), not the corresponding totals (eg DIC_conc). This is less convenient here (where we are want to set DIC_conc and B_conc that remain constant), but may not be an issue in a more complete model that includes additional processes that define  time evolution that is insensitive to initial conditions after a spinup.\nThis configuration provides concentrations, instead of mol (per cell) to the solver. This is not required here, but is good practice as it helps the numerical solver by providing variables with better scaling.","category":"page"},{"location":"collated_examples/configurable_chemistry/README/#yaml-configuration-file-2","page":"Configurable chemistry using PALEOaqchem","title":"yaml configuration file","text":"","category":"section"},{"location":"collated_examples/configurable_chemistry/README/","page":"Configurable chemistry using PALEOaqchem","title":"Configurable chemistry using PALEOaqchem","text":"The model configuration (file examples/configurable_chemistry/config_ex2.yaml) contains: ","category":"page"},{"location":"collated_examples/configurable_chemistry/README/","page":"Configurable chemistry using PALEOaqchem","title":"Configurable chemistry using PALEOaqchem","text":"import Markdown\nMarkdown.parse(\n    \"\"\"```julia\n    $(read(joinpath(ENV[\"PALEO_EXAMPLES\"], \"configurable_chemistry/config_ex2.yaml\"), String))\n    ```\"\"\"\n)","category":"page"},{"location":"collated_examples/configurable_chemistry/README/#Run-script-2","page":"Configurable chemistry using PALEOaqchem","title":"Run script","text":"","category":"section"},{"location":"collated_examples/configurable_chemistry/README/","page":"Configurable chemistry using PALEOaqchem","title":"Configurable chemistry using PALEOaqchem","text":"The script to run the model (file examples/configurable_chemistry/run_ex2.jl) contains:","category":"page"},{"location":"collated_examples/configurable_chemistry/README/","page":"Configurable chemistry using PALEOaqchem","title":"Configurable chemistry using PALEOaqchem","text":"import Markdown\nMarkdown.parse(\n    \"\"\"```julia\n    $(read(joinpath(ENV[\"PALEO_EXAMPLES\"], \"configurable_chemistry/run_ex2.jl\"), String))\n    ```\"\"\"\n)","category":"page"},{"location":"collated_examples/configurable_chemistry/README/","page":"Configurable chemistry using PALEOaqchem","title":"Configurable chemistry using PALEOaqchem","text":"and produces output showing the change, if TAlk_conc increase, how the carbonic acid and pH change in ocean:","category":"page"},{"location":"collated_examples/configurable_chemistry/README/","page":"Configurable chemistry using PALEOaqchem","title":"Configurable chemistry using PALEOaqchem","text":"include(joinpath(ENV[\"PALEO_EXAMPLES\"], \"configurable_chemistry/run_ex2.jl\")) # hide\nplot(paleorun.output, [\"ocean.TAlk_conc\", \"ocean.DIC_conc\"],                                           (cell=1,); ylabel=\"TAlk, DIC conc (mol m-3)\") # hide\nsavefig(\"ex2_plot1.svg\"); nothing  # hide\nplot(paleorun.output, \"ocean.pH\",                                                                      (cell=1,)) # hide\nsavefig(\"ex2_plot2.svg\"); nothing  # hide\nplot(paleorun.output, [\"ocean.DIC_conc\", \"ocean.HCO3_conc\", \"ocean.CO3_conc\", \"ocean.CO2_aq_conc\"],    (cell=1,); ylabel=\"DIC species (mol m-3)\") # hide\nsavefig(\"ex2_plot3.svg\"); nothing  # hide\ndisplay(  # hide\n    plot(  # hide\n        paleorun.output,   # hide\n        [\"ocean.HCO3_conc\", \"ocean.CO3_conc\", \"ocean.CO2_aq_conc\", \"ocean.BOH4_conc\", \"ocean.BOH3_conc\",  \"ocean.H_conc\", \"ocean.OH_conc\",],  # hide\n        (cell=1, );  # hide\n        coords=[\"tmodel\"=>(\"ocean.pH\",),], # plot against pH instead of tmodel  # hide\n        ylabel=\"H2O, B, DIC species (mol m-3)\", ylim=(0.5e-3, 0.5e1), yscale=:log10,  # hide\n        legend_background_color=nothing,  # hide\n        legend=:bottom,  # hide\n    )  # hide\n)  # hide\nsavefig(\"ex2_plot4.svg\"); nothing  # hide","category":"page"},{"location":"collated_examples/configurable_chemistry/README/","page":"Configurable chemistry using PALEOaqchem","title":"Configurable chemistry using PALEOaqchem","text":"(Image: ) (Image: ) (Image: ) (Image: )","category":"page"},{"location":"collated_examples/configurable_chemistry/README/#Displaying-model-structure-and-variables-2","page":"Configurable chemistry using PALEOaqchem","title":"Displaying model structure and variables","text":"","category":"section"},{"location":"collated_examples/configurable_chemistry/README/","page":"Configurable chemistry using PALEOaqchem","title":"Configurable chemistry using PALEOaqchem","text":"All metadata for model variables can be displayed with PB.show_variables:","category":"page"},{"location":"collated_examples/configurable_chemistry/README/","page":"Configurable chemistry using PALEOaqchem","title":"Configurable chemistry using PALEOaqchem","text":"show(PB.show_variables(model), allcols=true, allrows=true) # display in REPL\n# vscodedisplay(PB.show_variables(model)) # more convenient when using VS code","category":"page"},{"location":"collated_examples/ocean_chemistry/README/#Ocean-chemistry","page":"Ocean chemistry","title":"Ocean chemistry","text":"","category":"section"},{"location":"collated_examples/ocean_chemistry/README/","page":"Ocean chemistry","title":"Ocean chemistry","text":"These examples illustrate how to implement:","category":"page"},{"location":"collated_examples/ocean_chemistry/README/","page":"Ocean chemistry","title":"Ocean chemistry","text":"a minimal model of the marine carbonate system\nair-sea exchange of CO2 between ocean and atmosphere Domains","category":"page"},{"location":"collated_examples/ocean_chemistry/README/","page":"Ocean chemistry","title":"Ocean chemistry","text":"See PALEOmodel documentation for more information on analysing model output.","category":"page"},{"location":"collated_examples/ocean_chemistry/README/#Example-1-Minimal-Alk-pH-model","page":"Ocean chemistry","title":"Example 1 Minimal Alk-pH model","text":"","category":"section"},{"location":"collated_examples/ocean_chemistry/README/","page":"Ocean chemistry","title":"Ocean chemistry","text":"This example implements a new Reaction_Alk_pH to establish a minimal Alk-pH model for aqueous carbonate chemistry. Carbonate system equations are from (Zeebe and Wolf-Gladrow, 2001).","category":"page"},{"location":"collated_examples/ocean_chemistry/README/","page":"Ocean chemistry","title":"Ocean chemistry","text":"The ocean domain contains a ReactionNoTransport from the PALEOocean Julia package.  This defines standard ocean variables including cell volume, and is configured here to provide one ocean cell.","category":"page"},{"location":"collated_examples/ocean_chemistry/README/","page":"Ocean chemistry","title":"Ocean chemistry","text":"There are two state variables for DIC and TAlk, implemented using a ReactionReservoir from the PALEOboxes Julia package. This Reaction also provides concentrations in mol m-3.","category":"page"},{"location":"collated_examples/ocean_chemistry/README/","page":"Ocean chemistry","title":"Ocean chemistry","text":"The carbonate chemistry system is solved as an algebraic constraint, calculating TAlk_calcu as a function of pH and then using a PALEO solver to solve for the pH value that makes TAlk_calcu equal to the required value. In PALEO this is implemented by defining pH as a VarState (attribute :vfunction = PB.VF_State) and the algebraic constraint TAlk_error as a VarConstraint (with attribute :vfunction = PB.VF_Constraint). The combined system of TAlk and DIC reservoirs and pH is then a Differential Algebraic Equation (DAE) with two state variables and one algebraic constraint, and is integrated forward in time by a DAE solver PALEOmodel.ODE.integrateDAE.","category":"page"},{"location":"collated_examples/ocean_chemistry/README/#Additional-code-files","page":"Ocean chemistry","title":"Additional code files","text":"","category":"section"},{"location":"collated_examples/ocean_chemistry/README/","page":"Ocean chemistry","title":"Ocean chemistry","text":"The Reaction code (Reaction_Alk_pH in file examples/ocean_chemistry/reactions_Alk_pH.jl) now produces calculation of different carbon species HCO3_conc, CO3_conc, CO2_aq_conc, boron species BOH4_conc, water species H_conc and OH_conc given DIC_conc, TAlk_conc and pH. Difference from required alkalinity TAlk_error is then calculated and labelled as an algebraic constraint. Note that there is loop over ocean cells to support arbitrary ocean models:","category":"page"},{"location":"collated_examples/ocean_chemistry/README/","page":"Ocean chemistry","title":"Ocean chemistry","text":"import Markdown\nMarkdown.parse(\n    \"\"\"```julia\n    $(read(joinpath(ENV[\"PALEO_EXAMPLES\"], \"ocean_chemistry/reactions_Alk_pH.jl\"), String))\n    ```\"\"\"\n)","category":"page"},{"location":"collated_examples/ocean_chemistry/README/","page":"Ocean chemistry","title":"Ocean chemistry","text":"Documentation (generated by the Julia docstring) reads:","category":"page"},{"location":"collated_examples/ocean_chemistry/README/","page":"Ocean chemistry","title":"Ocean chemistry","text":"CurrentModule = Min_Alk_pH","category":"page"},{"location":"collated_examples/ocean_chemistry/README/","page":"Ocean chemistry","title":"Ocean chemistry","text":"Reaction_Alk_pH","category":"page"},{"location":"collated_examples/ocean_chemistry/README/#Main.Min_Alk_pH.Reaction_Alk_pH","page":"Ocean chemistry","title":"Main.Min_Alk_pH.Reaction_Alk_pH","text":"Reaction_Alk_pH\n\nMinimal example for aqueous carbonate system.\n\nSolves for carbon, boron and water species given pH, calculates difference TAlk_error from required alkalinity.\n\nUse in conjunction with a DAE solver, where this Reaction provides an algebraic constraint TAlk_error on pH.\n\nParameters\n\nK_1[Float64]=1.4e-6  (mol kg-1), default_value=1.4e-6, description=\"equilibrium constant of CO2_aq and HCO3-\"\nK_2[Float64]=1.2e-9  (mol kg-1), default_value=1.2e-9, description=\"equilibrium constant of HCO3- and CO32-\"\nK_w[Float64]=6.0e-14  (mol^2 kg-2), default_value=6.0e-14, description=\"equilibrium constant of water at S=35, T=25°C\"\nK_B[Float64]=2.5e-9  (mol kg-1), default_value=2.5e-9, description=\"equilibrium constant of B(OH)4-\"\n\nMethods and Variables\n\ndo_Min_Alk_pH\nDIC_conc  (mol m-3), VT_ReactDependency, description=\"DIC concentration\"\nTAlk_conc  (mol m-3), VT_ReactDependency, description=\"TA concentration\"\nB_conc  (mol m-3), VT_ReactDependency, description=\"total Boron concentration\"\nTAlk_error  (mol m-3), VT_ReactContributor, VF_Constraint, description=\"in order to solve TA, we set it\"\nHCO3_conc  (mol m-3), VT_ReactProperty, description=\"HCO3- concentration\"\nCO3_conc  (mol m-3), VT_ReactProperty, description=\"CO32- concentration\"\nCO2_aq_conc  (mol m-3), VT_ReactProperty, description=\"CO2_aq concentration\"\nBOH3_conc  (mol m-3), VT_ReactProperty, description=\"BOH3 concentration\"\nBOH4_conc  (mol m-3), VT_ReactProperty, description=\"BOH4- concentration\"\nH_conc  (mol m-3), VT_ReactProperty, description=\"concentration of H+\"\nOH_conc  (mol m-3), VT_ReactProperty, description=\"concentration of OH-\"\npH  (), VT_ReactDependency, VF_State, description=\"it is the calcalation for pH\"\ndensity  (kg m-3), VT_ReactDependency, description=\"ocean density\"\n\n\n\n\n\n","category":"type"},{"location":"collated_examples/ocean_chemistry/README/#yaml-configuration-file","page":"Ocean chemistry","title":"yaml configuration file","text":"","category":"section"},{"location":"collated_examples/ocean_chemistry/README/","page":"Ocean chemistry","title":"Ocean chemistry","text":"The model configuration (file examples/ocean_chemistry/config_ex1.yaml) contains two Reservoirs DIC, TAlk. A ReactionFluxPerturb from the PALEOboxes.jl reaction catalog is used to add a constant TAlk flux.","category":"page"},{"location":"collated_examples/ocean_chemistry/README/","page":"Ocean chemistry","title":"Ocean chemistry","text":"import Markdown\nMarkdown.parse(\n    \"\"\"```julia\n    $(read(joinpath(ENV[\"PALEO_EXAMPLES\"], \"ocean_chemistry/config_ex1.yaml\"), String))\n    ```\"\"\"\n)","category":"page"},{"location":"collated_examples/ocean_chemistry/README/#Run-script","page":"Ocean chemistry","title":"Run script","text":"","category":"section"},{"location":"collated_examples/ocean_chemistry/README/","page":"Ocean chemistry","title":"Ocean chemistry","text":"The script to run the model (file examples/ocean_chemistry/run_ex1.jl) contains:","category":"page"},{"location":"collated_examples/ocean_chemistry/README/","page":"Ocean chemistry","title":"Ocean chemistry","text":"import Markdown\nMarkdown.parse(\n    \"\"\"```julia\n    $(read(joinpath(ENV[\"PALEO_EXAMPLES\"], \"ocean_chemistry/run_ex1.jl\"), String))\n    ```\"\"\"\n)","category":"page"},{"location":"collated_examples/ocean_chemistry/README/","page":"Ocean chemistry","title":"Ocean chemistry","text":"and produces output showing the change, if TAlk_conc increase, how the carbonic acid and pH change in ocean:","category":"page"},{"location":"collated_examples/ocean_chemistry/README/","page":"Ocean chemistry","title":"Ocean chemistry","text":"include(joinpath(ENV[\"PALEO_EXAMPLES\"], \"ocean_chemistry/run_ex1.jl\")) # hide\nplot(paleorun.output, [\"ocean.TAlk_conc\", \"ocean.DIC_conc\"],                                           (cell=1,); ylabel=\"TAlk, DIC conc (mol m-3)\") # hide\nsavefig(\"ex1_plot1.svg\"); nothing  # hide\nplot(paleorun.output, \"ocean.pH\",                                                                      (cell=1,)) # hide\nsavefig(\"ex1_plot2.svg\"); nothing  # hide\nplot(paleorun.output, [\"ocean.DIC_conc\", \"ocean.HCO3_conc\", \"ocean.CO3_conc\", \"ocean.CO2_aq_conc\"],    (cell=1,); ylabel=\"DIC species (mol m-3)\") # hide\nsavefig(\"ex1_plot3.svg\"); nothing  # hide\ndisplay(  # hide\n    plot(  # hide\n        paleorun.output,   # hide\n        [\"ocean.HCO3_conc\", \"ocean.CO3_conc\", \"ocean.CO2_aq_conc\", \"ocean.BOH4_conc\", \"ocean.BOH3_conc\",  \"ocean.H_conc\", \"ocean.OH_conc\",],  # hide\n        (cell=1, ); # hide\n        coords=[\"tmodel\"=>(\"ocean.pH\",),], # plot against pH instead of tmodel  # hide\n        ylabel=\"H2O, B, DIC species (mol m-3)\", ylim=(0.5e-3, 0.5e1), yscale=:log10,  # hide\n        legend_background_color=nothing,  # hide\n        legend=:bottom,  # hide\n    )  # hide\n)  # hide\nsavefig(\"ex1_plot4.svg\"); nothing  # hide","category":"page"},{"location":"collated_examples/ocean_chemistry/README/","page":"Ocean chemistry","title":"Ocean chemistry","text":"(Image: ) (Image: ) (Image: ) (Image: )","category":"page"},{"location":"collated_examples/ocean_chemistry/README/#Displaying-model-structure-and-variables","page":"Ocean chemistry","title":"Displaying model structure and variables","text":"","category":"section"},{"location":"collated_examples/ocean_chemistry/README/","page":"Ocean chemistry","title":"Ocean chemistry","text":"All metadata for model variables can be displayed with PB.show_variables:","category":"page"},{"location":"collated_examples/ocean_chemistry/README/","page":"Ocean chemistry","title":"Ocean chemistry","text":"show(PB.show_variables(model), allcols=true, allrows=true) # display in REPL\n# vscodedisplay(PB.show_variables(model)) # more convenient when using VS code","category":"page"},{"location":"collated_examples/ocean_chemistry/README/#Example-2-Air-sea-exchange","page":"Ocean chemistry","title":"Example 2 Air-sea exchange","text":"","category":"section"},{"location":"collated_examples/ocean_chemistry/README/","page":"Ocean chemistry","title":"Ocean chemistry","text":"This example adds air-sea exchange of CO2 to Example 1 Minimal Alk-pH model.","category":"page"},{"location":"collated_examples/ocean_chemistry/README/","page":"Ocean chemistry","title":"Ocean chemistry","text":"This configuration adds an atmosphere Domain atm with a state variable for atmospheric CO2. Following the standard PALEO convention for coupling spatial Domains, air-sea exchange is implemented by a combination of the new reaction Reaction_Min_AirSeaExchange in the oceansurface Domain, a ReactionFluxTarget in a fluxAtmtoOceansurface Domain to store the calculated flux, and a pair of ReactionFluxTransfers to apply the calculated fluxes to the atmosphere CO2 and ocean DIC reservoirs. NB: the ocean.oceansurface subdomain represents the subset of ocean cells adjacent to the surface, and contains the same number of cells as the oceansurface and fluxAtmtoOceansurface Domains, with a 1-1 correspondence.","category":"page"},{"location":"collated_examples/ocean_chemistry/README/#Additional-code-files-2","page":"Ocean chemistry","title":"Additional code files","text":"","category":"section"},{"location":"collated_examples/ocean_chemistry/README/","page":"Ocean chemistry","title":"Ocean chemistry","text":"In order to evaluate the CO2 flux change between air and sea, we add a file (file examples/ocean_chemistry/reactions_AirSeaExchange.jl) that implements a Reaction_Min_AirSeaExchange to calculate air-sea CO2 exchange following Henry's Law. NB: the reaction is implemented for a generic gas X that is then linked to the CO2 and DIC variables using the variable_links: section in the .yaml configuration file.","category":"page"},{"location":"collated_examples/ocean_chemistry/README/","page":"Ocean chemistry","title":"Ocean chemistry","text":"import Markdown\nMarkdown.parse(\n    \"\"\"```julia\n    $(read(joinpath(ENV[\"PALEO_EXAMPLES\"], \"ocean_chemistry/reactions_AirSeaExchange.jl\"), String))\n    ```\"\"\"\n)","category":"page"},{"location":"collated_examples/ocean_chemistry/README/","page":"Ocean chemistry","title":"Ocean chemistry","text":"Documentation (generated by the Julia docstring) reads:","category":"page"},{"location":"collated_examples/ocean_chemistry/README/","page":"Ocean chemistry","title":"Ocean chemistry","text":"CurrentModule = Min_AirSeaExchange","category":"page"},{"location":"collated_examples/ocean_chemistry/README/","page":"Ocean chemistry","title":"Ocean chemistry","text":"Reaction_Min_AirSeaExchange","category":"page"},{"location":"collated_examples/ocean_chemistry/README/#Main.Min_AirSeaExchange.Reaction_Min_AirSeaExchange","page":"Ocean chemistry","title":"Main.Min_AirSeaExchange.Reaction_Min_AirSeaExchange","text":"Reaction_Min_AirSeaExchange\n\nMinimal example, just make a easy way to illustrate Air-Sea exchange.\n\nThis implements exchange between Air and Sea for a generic gas X with fixed Henry law coefficient K_0 and piston velocity vpiston.\n\nThe Reaction-local Variables X_aq_conc, pXatm, X_airsea_exchange should be linked to the appropriate variables using the variable_links: section in the .yaml file.\n\nParameters\n\nK_0[Float64]=34.0  (mol m-3 atm-1), default_value=34.0, description=\"Henry Law coefficient\"\nvpiston[Float64]=1138.8  (m yr-1), default_value=1138.8, description=\"piston value for a whole year, 365 days\"\n\nMethods and Variables\n\ndo_Min_AirSeaExchange\nX_aq_conc  (mol m-3), VT_ReactDependency, description=\"ocean concentration per cell\"\npXatm  (atm), VT_ReactDependency, description=\"atmospheric partial pressure, unit is atm\"\nX_airsea_exchange  (mol yr-1), VT_ReactContributor, description=\"calculated airsea exchange flux for gas X\"\narea  (m2), VT_ReactDependency, description=\"surface area\"\n\n\n\n\n\n","category":"type"},{"location":"collated_examples/ocean_chemistry/README/#yaml-configuration-file-2","page":"Ocean chemistry","title":"yaml configuration file","text":"","category":"section"},{"location":"collated_examples/ocean_chemistry/README/","page":"Ocean chemistry","title":"Ocean chemistry","text":"The model configuration (file examples/ocean_chemistry/config_ex2.yaml) contains three Reservoirs DIC, TAlk and CO2. Following reservoirs Example 4 Transfer between Domains, we use ReactionFluxTarget and ReactionFluxTransfer to transfer CO2_airsea_exchange between DIC reservoir and CO2 reservoir:","category":"page"},{"location":"collated_examples/ocean_chemistry/README/","page":"Ocean chemistry","title":"Ocean chemistry","text":"import Markdown\nMarkdown.parse(\n    \"\"\"```julia\n    $(read(joinpath(ENV[\"PALEO_EXAMPLES\"], \"ocean_chemistry/config_ex2.yaml\"), String))\n    ```\"\"\"\n)","category":"page"},{"location":"collated_examples/ocean_chemistry/README/#Run-script-2","page":"Ocean chemistry","title":"Run script","text":"","category":"section"},{"location":"collated_examples/ocean_chemistry/README/","page":"Ocean chemistry","title":"Ocean chemistry","text":"The script to run the model (file examples/ocean_chemistry/run_ex2.jl) contains:","category":"page"},{"location":"collated_examples/ocean_chemistry/README/","page":"Ocean chemistry","title":"Ocean chemistry","text":"import Markdown\nMarkdown.parse(\n    \"\"\"```julia\n    $(read(joinpath(ENV[\"PALEO_EXAMPLES\"], \"ocean_chemistry/run_ex2.jl\"), String))\n    ```\"\"\"\n)","category":"page"},{"location":"collated_examples/ocean_chemistry/README/","page":"Ocean chemistry","title":"Ocean chemistry","text":"and produces output showing the change, if TAlk_conc increase, how the carbonic acid and pH change in ocean and CO2 change in the air:","category":"page"},{"location":"collated_examples/ocean_chemistry/README/","page":"Ocean chemistry","title":"Ocean chemistry","text":"include(joinpath(ENV[\"PALEO_EXAMPLES\"], \"ocean_chemistry/run_ex2.jl\")) # hide\nplot(paleorun.output, [\"ocean.TAlk_conc\", \"ocean.DIC_conc\"],                                           (cell=1,); ylabel=\"TAlk, DIC conc (mol m-3)\") # hide\nsavefig(\"ex2_plot1.svg\"); nothing  # hide\nplot(paleorun.output, \"ocean.pH\",                                                                      (cell=1,)) # hide\nsavefig(\"ex2_plot2.svg\"); nothing  # hide\nplot(paleorun.output, [\"ocean.DIC_conc\", \"ocean.HCO3_conc\", \"ocean.CO3_conc\", \"ocean.CO2_aq_conc\"],    (cell=1,); ylabel=\"DIC species (mol m-3)\") # hide\nsavefig(\"ex2_plot3.svg\"); nothing  # hide\ndisplay(plot(paleorun.output, \"atm.pCO2atm\",                                                                   ))  # hide\nsavefig(\"ex2_plot4.svg\"); nothing  # hide\ndisplay(plot(paleorun.output, [\"global.C_total\", \"atm.CO2\", \"ocean.DIC_total\"]                                  ; ylabel=\"atm-ocean carbon (mol)\"))\nsavefig(\"ex2_plot5.svg\"); nothing  # hide","category":"page"},{"location":"collated_examples/ocean_chemistry/README/","page":"Ocean chemistry","title":"Ocean chemistry","text":"(Image: ) (Image: ) (Image: ) (Image: ) (Image: )","category":"page"},{"location":"collated_examples/ocean_chemistry/README/#Displaying-model-structure-and-variables-2","page":"Ocean chemistry","title":"Displaying model structure and variables","text":"","category":"section"},{"location":"collated_examples/ocean_chemistry/README/","page":"Ocean chemistry","title":"Ocean chemistry","text":"All metadata for model variables can be displayed with PB.show_variables:","category":"page"},{"location":"collated_examples/ocean_chemistry/README/","page":"Ocean chemistry","title":"Ocean chemistry","text":"show(PB.show_variables(model), allcols=true, allrows=true) # display in REPL\n# vscodedisplay(PB.show_variables(model)) # more convenient when using VS code","category":"page"},{"location":"collated_examples/ocean_chemistry/README/#Example-3-Minimal-modern-earth-ocean-air","page":"Ocean chemistry","title":"Example 3 Minimal modern earth ocean-air","text":"","category":"section"},{"location":"collated_examples/ocean_chemistry/README/","page":"Ocean chemistry","title":"Ocean chemistry","text":"This example shows how ocean(TAlk-DIC)-air(CO2) exchange in modern state Example 3 Minimal modern earth ocean-air.","category":"page"},{"location":"collated_examples/ocean_chemistry/README/","page":"Ocean chemistry","title":"Ocean chemistry","text":"This configuration .yaml file is the same as Example 2 Air-sea exchange. What is different is that we set TAlk, DIC and K_0 to be modern state value (from (Sarmiento and Gruber, 2006)) using PB.set_parameter_value! and PB.set_variable_attribute!","category":"page"},{"location":"collated_examples/ocean_chemistry/README/","page":"Ocean chemistry","title":"Ocean chemistry","text":"NB: this is not an accurate model for the modern system ! See PALEOocean.jl for more complete models, including representations of ocean spatial structure and circulation, and more detailed parameterisations of carbonate chemistry (ReactionCO2SYS) and air-sea exchange (ReactionAirSeaCO2)","category":"page"},{"location":"collated_examples/ocean_chemistry/README/#Run-script-3","page":"Ocean chemistry","title":"Run script","text":"","category":"section"},{"location":"collated_examples/ocean_chemistry/README/","page":"Ocean chemistry","title":"Ocean chemistry","text":"The script to run the model (file examples/ocean_chemistry/run_ex3.jl) contains:","category":"page"},{"location":"collated_examples/ocean_chemistry/README/","page":"Ocean chemistry","title":"Ocean chemistry","text":"import Markdown\nMarkdown.parse(\n    \"\"\"```julia\n    $(read(joinpath(ENV[\"PALEO_EXAMPLES\"], \"ocean_chemistry/run_ex3.jl\"), String))\n    ```\"\"\"\n)","category":"page"},{"location":"collated_examples/ocean_chemistry/README/","page":"Ocean chemistry","title":"Ocean chemistry","text":"and produces output showing an approximate modern steady state:","category":"page"},{"location":"collated_examples/ocean_chemistry/README/","page":"Ocean chemistry","title":"Ocean chemistry","text":"include(joinpath(ENV[\"PALEO_EXAMPLES\"], \"ocean_chemistry/run_ex3.jl\")) # hide\nplot(paleorun.output, [\"ocean.TAlk_conc\", \"ocean.DIC_conc\"],                                           (cell=1,); ylabel=\"TAlk, DIC conc (mol m-3)\") # hide\nsavefig(\"ex3_plot1.svg\"); nothing  # hide\nplot(paleorun.output, \"ocean.pH\",                                                                      (cell=1,)) # hide\nsavefig(\"ex3_plot2.svg\"); nothing  # hide\nplot(paleorun.output, [\"ocean.DIC_conc\", \"ocean.HCO3_conc\", \"ocean.CO3_conc\", \"ocean.CO2_aq_conc\"],    (cell=1,); ylabel=\"DIC species (mol m-3)\") # hide\nsavefig(\"ex3_plot3.svg\"); nothing  # hide\ndisplay(plot(paleorun.output, \"atm.pCO2atm\",                                                                   ))  # hide\nsavefig(\"ex3_plot4.svg\"); nothing  # hide\ndisplay(plot(paleorun.output, [\"global.C_total\", \"atm.CO2\", \"ocean.DIC_total\"]                                  ; ylabel=\"atm-ocean carbon (mol)\"))\nsavefig(\"ex3_plot5.svg\"); nothing  # hide","category":"page"},{"location":"collated_examples/ocean_chemistry/README/","page":"Ocean chemistry","title":"Ocean chemistry","text":"(Image: ) (Image: ) (Image: ) (Image: ) (Image: )","category":"page"},{"location":"collated_examples/ocean_chemistry/README/","page":"Ocean chemistry","title":"Ocean chemistry","text":"For more information and cooperation, please communicate with us!","category":"page"},{"location":"collated_examples/reservoirs/README/#Reservoirs-and-fluxes","page":"Reservoirs and fluxes","title":"Reservoirs and fluxes","text":"","category":"section"},{"location":"collated_examples/reservoirs/README/","page":"Reservoirs and fluxes","title":"Reservoirs and fluxes","text":"These examples illustrate how to code a PALEO Reaction and configure a model, working through a minimal example of first order decay or transformation of a scalar biogeochemical reservoir A into a second reservoir B via a flux F, with equations:","category":"page"},{"location":"collated_examples/reservoirs/README/","page":"Reservoirs and fluxes","title":"Reservoirs and fluxes","text":"F = kappa A","category":"page"},{"location":"collated_examples/reservoirs/README/","page":"Reservoirs and fluxes","title":"Reservoirs and fluxes","text":"fracdAdt = - F ","category":"page"},{"location":"collated_examples/reservoirs/README/","page":"Reservoirs and fluxes","title":"Reservoirs and fluxes","text":"fracdBdt =   F ","category":"page"},{"location":"collated_examples/reservoirs/README/","page":"Reservoirs and fluxes","title":"Reservoirs and fluxes","text":"See Displaying model configuration and output from the Julia REPL for more information on analysing model output.","category":"page"},{"location":"collated_examples/reservoirs/README/#Example-1-A-minimal-self-contained-PALEO-reaction","page":"Reservoirs and fluxes","title":"Example 1 A minimal self-contained PALEO reaction","text":"","category":"section"},{"location":"collated_examples/reservoirs/README/","page":"Reservoirs and fluxes","title":"Reservoirs and fluxes","text":"This is verbose as we have to (re)implement Variable setup and initialisation as well as the biogeochemical reaction of interest, but illustrates the structure of a PALEO model.","category":"page"},{"location":"collated_examples/reservoirs/README/","page":"Reservoirs and fluxes","title":"Reservoirs and fluxes","text":"info: Info\nThis verbose approach is not usually required, it is usually simpler to use predefined PALEO Reservoirs as described below, Example 2 Using a PALEO Reservoir","category":"page"},{"location":"collated_examples/reservoirs/README/#Additional-code-files","page":"Reservoirs and fluxes","title":"Additional code files","text":"","category":"section"},{"location":"collated_examples/reservoirs/README/","page":"Reservoirs and fluxes","title":"Reservoirs and fluxes","text":"The code to implement a self-contained PALEO reaction is in file examples/reservoirs/reactions_ex1.jl, and needs to provide three methods for Variable setup, initialization at the start of the main loop, as well as the actual main loop do method. Variables are labelled as state Variables and derivatives by setting the :vfunction attribute to VF_StateExplicit and VF_Deriv.","category":"page"},{"location":"collated_examples/reservoirs/README/","page":"Reservoirs and fluxes","title":"Reservoirs and fluxes","text":"import Markdown\nMarkdown.parse(\n    \"\"\"```julia\n    $(read(joinpath(ENV[\"PALEO_EXAMPLES\"], \"reservoirs/reactions_ex1.jl\"), String))\n    ```\"\"\"\n)","category":"page"},{"location":"collated_examples/reservoirs/README/#yaml-configuration-file","page":"Reservoirs and fluxes","title":"yaml configuration file","text":"","category":"section"},{"location":"collated_examples/reservoirs/README/","page":"Reservoirs and fluxes","title":"Reservoirs and fluxes","text":"The model configuration (file examples/reservoirs/config_ex1.yaml) contains just a single Reaction:","category":"page"},{"location":"collated_examples/reservoirs/README/","page":"Reservoirs and fluxes","title":"Reservoirs and fluxes","text":"import Markdown\nMarkdown.parse(\n    \"\"\"```julia\n    $(read(joinpath(ENV[\"PALEO_EXAMPLES\"], \"reservoirs/config_ex1.yaml\"), String))\n    ```\"\"\"\n)","category":"page"},{"location":"collated_examples/reservoirs/README/#Run-script","page":"Reservoirs and fluxes","title":"Run script","text":"","category":"section"},{"location":"collated_examples/reservoirs/README/","page":"Reservoirs and fluxes","title":"Reservoirs and fluxes","text":"The script to run the model (file examples/reservoirs/run_ex1.yaml) contains:","category":"page"},{"location":"collated_examples/reservoirs/README/","page":"Reservoirs and fluxes","title":"Reservoirs and fluxes","text":"import Markdown\nMarkdown.parse(\n    \"\"\"```julia\n    $(read(joinpath(ENV[\"PALEO_EXAMPLES\"], \"reservoirs/run_ex1.jl\"), String))\n    ```\"\"\"\n)","category":"page"},{"location":"collated_examples/reservoirs/README/","page":"Reservoirs and fluxes","title":"Reservoirs and fluxes","text":"And produces output:","category":"page"},{"location":"collated_examples/reservoirs/README/","page":"Reservoirs and fluxes","title":"Reservoirs and fluxes","text":"include(joinpath(ENV[\"PALEO_EXAMPLES\"], \"reservoirs/run_ex1.jl\")) # hide\nplot(paleorun.output, \"global.A\") # hide\nsavefig(\"ex1_plot1.svg\")  # hide\nplot(paleorun.output, \"global.decay_flux\")  # hide\nsavefig(\"ex1_plot2.svg\"); nothing # hide","category":"page"},{"location":"collated_examples/reservoirs/README/","page":"Reservoirs and fluxes","title":"Reservoirs and fluxes","text":"(Image: ) (Image: )","category":"page"},{"location":"collated_examples/reservoirs/README/#Displaying-model-structure-and-variables","page":"Reservoirs and fluxes","title":"Displaying model structure and variables","text":"","category":"section"},{"location":"collated_examples/reservoirs/README/","page":"Reservoirs and fluxes","title":"Reservoirs and fluxes","text":"All metadata for model variables can be displayed with PB.show_variables:","category":"page"},{"location":"collated_examples/reservoirs/README/","page":"Reservoirs and fluxes","title":"Reservoirs and fluxes","text":"show(PB.show_variables(model), allcols=true, allrows=true) # display in REPL\n# vscodedisplay(PB.show_variables(model)) # more convenient when using VS code","category":"page"},{"location":"collated_examples/reservoirs/README/","page":"Reservoirs and fluxes","title":"Reservoirs and fluxes","text":"The type column shows the two pairings of VariableReactions linked to VariableDomains:","category":"page"},{"location":"collated_examples/reservoirs/README/","page":"Reservoirs and fluxes","title":"Reservoirs and fluxes","text":"Reaction Property and Dependency Variables, linked to a VariableDomPropDep. These are used to represent   a quantity calculated in one Reaction (or provided by the numerical solver, in the case of \"global.A\") that is then used by other Reactions.\nReaction Target and Contributor Variables, linked to a VariableDomContribTarget. These are used to represent   a flux-like quantity, with one Reaction (or the numerical solver, in the case of \"global.A_sms\") definining the Target and multiple Reactions adding contributions.","category":"page"},{"location":"collated_examples/reservoirs/README/","page":"Reservoirs and fluxes","title":"Reservoirs and fluxes","text":"Variable links for an individual VariableDomain can be displayed using PB.show_links, where the linked variables are shown as \"<domain name>.<reaction name>.<method name>.<local name>\":","category":"page"},{"location":"collated_examples/reservoirs/README/","page":"Reservoirs and fluxes","title":"Reservoirs and fluxes","text":"PB.show_links(model, \"global.decay_flux\")","category":"page"},{"location":"collated_examples/reservoirs/README/","page":"Reservoirs and fluxes","title":"Reservoirs and fluxes","text":"(demonstrating that global.decay_flux is set by the do_example1 method of the Reaction named Adecay in the yaml config file)","category":"page"},{"location":"collated_examples/reservoirs/README/","page":"Reservoirs and fluxes","title":"Reservoirs and fluxes","text":"PB.show_links(model, \"global.A\")","category":"page"},{"location":"collated_examples/reservoirs/README/","page":"Reservoirs and fluxes","title":"Reservoirs and fluxes","text":"(demonstrating that the \"global.A\" state Variable has both the do_setup_example1 and do_example1 methods of the Reaction named Adecay in the yaml config file, which respectively set the initial value at model start, and then read the value at each timestep)","category":"page"},{"location":"collated_examples/reservoirs/README/","page":"Reservoirs and fluxes","title":"Reservoirs and fluxes","text":"PB.show_variables with an additional showlinks=true argument will also show variable links:","category":"page"},{"location":"collated_examples/reservoirs/README/","page":"Reservoirs and fluxes","title":"Reservoirs and fluxes","text":"show(PB.show_variables(model; showlinks=true), allcols=true, allrows=true) # display in REPL\n# vscodedisplay(PB.show_variables(model; showlinks=true)) # more convenient when using VS code","category":"page"},{"location":"collated_examples/reservoirs/README/","page":"Reservoirs and fluxes","title":"Reservoirs and fluxes","text":"where the property, dependencies, target and contributor columns show the VariableReactions (defined by ReactionMethods) that link to each VariableDomain.","category":"page"},{"location":"collated_examples/reservoirs/README/#Analysing-output","page":"Reservoirs and fluxes","title":"Analysing output","text":"","category":"section"},{"location":"collated_examples/reservoirs/README/","page":"Reservoirs and fluxes","title":"Reservoirs and fluxes","text":"Numerical values of variables at each timestep can be displayed with PB.get_table:","category":"page"},{"location":"collated_examples/reservoirs/README/","page":"Reservoirs and fluxes","title":"Reservoirs and fluxes","text":"show(PB.get_table(paleorun.output, \"global\"), allcols=true, allrows=true) # display to REPL\n# vscodedisplay(PB.get_table(paleorun.output, \"global\")) # more convenient when using VS code","category":"page"},{"location":"collated_examples/reservoirs/README/","page":"Reservoirs and fluxes","title":"Reservoirs and fluxes","text":"NB: this displays Variables from the specified model Domain, for this example all Variables are in the \"global\" Domain.","category":"page"},{"location":"collated_examples/reservoirs/README/","page":"Reservoirs and fluxes","title":"Reservoirs and fluxes","text":"Output for a single Variable (eg for further analysis) can be retrieved with:","category":"page"},{"location":"collated_examples/reservoirs/README/","page":"Reservoirs and fluxes","title":"Reservoirs and fluxes","text":"A = PALEOmodel.get_array(paleorun.output, \"global.A\")  # an xarray like object with data and coordinates\nA.values  # a Vector of values at each model time","category":"page"},{"location":"collated_examples/reservoirs/README/#Example-2-Using-a-PALEO-Reservoir","page":"Reservoirs and fluxes","title":"Example 2 Using a PALEO Reservoir","text":"","category":"section"},{"location":"collated_examples/reservoirs/README/","page":"Reservoirs and fluxes","title":"Reservoirs and fluxes","text":"The standard way to configure PALEO models is to use a combination of ReactionReservoirs (from the Reaction catalog provided by the PALEOboxes package) to define model state Variables and provide setup and initialisation, and then link to these Variables from other Reactions.","category":"page"},{"location":"collated_examples/reservoirs/README/#Additional-code-files-2","page":"Reservoirs and fluxes","title":"Additional code files","text":"","category":"section"},{"location":"collated_examples/reservoirs/README/","page":"Reservoirs and fluxes","title":"Reservoirs and fluxes","text":"In this example, the Reaction code now only needs to implement a 'do' method (file examples/reservoirs/reactions_ex2.jl):","category":"page"},{"location":"collated_examples/reservoirs/README/","page":"Reservoirs and fluxes","title":"Reservoirs and fluxes","text":"import Markdown\nMarkdown.parse(\n    \"\"\"```julia\n    $(read(joinpath(ENV[\"PALEO_EXAMPLES\"], \"reservoirs/reactions_ex2.jl\"), String))\n    ```\"\"\"\n)","category":"page"},{"location":"collated_examples/reservoirs/README/#yaml-configuration-file-2","page":"Reservoirs and fluxes","title":"yaml configuration file","text":"","category":"section"},{"location":"collated_examples/reservoirs/README/","page":"Reservoirs and fluxes","title":"Reservoirs and fluxes","text":"The model configuration (file examples/reservoirs/config_ex2.yaml) contains a ReactionReservoirScalar from the generic Reaction catalog provided by the PALEOboxes package:","category":"page"},{"location":"collated_examples/reservoirs/README/","page":"Reservoirs and fluxes","title":"Reservoirs and fluxes","text":"import Markdown\nMarkdown.parse(\n    \"\"\"```julia\n    $(read(joinpath(ENV[\"PALEO_EXAMPLES\"], \"reservoirs/config_ex2.yaml\"), String))\n    ```\"\"\"\n)","category":"page"},{"location":"collated_examples/reservoirs/README/#Run-script-2","page":"Reservoirs and fluxes","title":"Run script","text":"","category":"section"},{"location":"collated_examples/reservoirs/README/","page":"Reservoirs and fluxes","title":"Reservoirs and fluxes","text":"The script to run the model (file examples/reservoirs/run_ex2.jl) contains:","category":"page"},{"location":"collated_examples/reservoirs/README/","page":"Reservoirs and fluxes","title":"Reservoirs and fluxes","text":"import Markdown\nMarkdown.parse(\n    \"\"\"```julia\n    $(read(joinpath(ENV[\"PALEO_EXAMPLES\"], \"reservoirs/run_ex2.jl\"), String))\n    ```\"\"\"\n)","category":"page"},{"location":"collated_examples/reservoirs/README/","page":"Reservoirs and fluxes","title":"Reservoirs and fluxes","text":"and produces output:","category":"page"},{"location":"collated_examples/reservoirs/README/","page":"Reservoirs and fluxes","title":"Reservoirs and fluxes","text":"include(joinpath(ENV[\"PALEO_EXAMPLES\"], \"reservoirs/run_ex2.jl\")) # hide\nplot(paleorun.output, \"global.A\") # hide\nsavefig(\"ex2_plot1.svg\")  # hide\nplot(paleorun.output, \"global.decay_flux\")  # hide\nsavefig(\"ex2_plot2.svg\"); nothing # hide","category":"page"},{"location":"collated_examples/reservoirs/README/","page":"Reservoirs and fluxes","title":"Reservoirs and fluxes","text":"(Image: ) (Image: )","category":"page"},{"location":"collated_examples/reservoirs/README/#Displaying-model-structure-and-variables-2","page":"Reservoirs and fluxes","title":"Displaying model structure and variables","text":"","category":"section"},{"location":"collated_examples/reservoirs/README/","page":"Reservoirs and fluxes","title":"Reservoirs and fluxes","text":"All metadata for model variables can be displayed with PB.show_variables:","category":"page"},{"location":"collated_examples/reservoirs/README/","page":"Reservoirs and fluxes","title":"Reservoirs and fluxes","text":"show(PB.show_variables(model), allcols=true, allrows=true) # display in REPL\n# vscodedisplay(PB.show_variables(model)) # more convenient when using VS code","category":"page"},{"location":"collated_examples/reservoirs/README/","page":"Reservoirs and fluxes","title":"Reservoirs and fluxes","text":"there is one more Variable \"global.A_norm\", the normalized value of \"global.A\", provided by the generic ReactionReservoirScalar and not used here.","category":"page"},{"location":"collated_examples/reservoirs/README/","page":"Reservoirs and fluxes","title":"Reservoirs and fluxes","text":"The linking of the \"global.A\" variable illustrates the key difference between this example and Example 1:","category":"page"},{"location":"collated_examples/reservoirs/README/","page":"Reservoirs and fluxes","title":"Reservoirs and fluxes","text":"PB.show_links(model, \"global.A\")","category":"page"},{"location":"collated_examples/reservoirs/README/","page":"Reservoirs and fluxes","title":"Reservoirs and fluxes","text":"The \"global.A\" state Variable now has three dependencies:","category":"page"},{"location":"collated_examples/reservoirs/README/","page":"Reservoirs and fluxes","title":"Reservoirs and fluxes","text":"the setup_initialvalue_vars_default method of the reaction named reservoir_A in the yaml file (a ReactionReservoirScalar), where the variable has local name R and has been renamed to A in the yaml file.\nthe do_reactionreservoirscalar method of the reaction named reservoir_A (which calculates normalized value A_norm, not needed here).\nthe do_example1 method of the Reaction named Adecay in the yaml config file, where the variable has local name A, which reads the value.","category":"page"},{"location":"collated_examples/reservoirs/README/#Example-3-Transfer-between-two-Reservoirs","page":"Reservoirs and fluxes","title":"Example 3 Transfer between two Reservoirs","text":"","category":"section"},{"location":"collated_examples/reservoirs/README/","page":"Reservoirs and fluxes","title":"Reservoirs and fluxes","text":"Generalizing the Reaction to transfer between two reservoirs.","category":"page"},{"location":"collated_examples/reservoirs/README/#Additional-code-files-3","page":"Reservoirs and fluxes","title":"Additional code files","text":"","category":"section"},{"location":"collated_examples/reservoirs/README/","page":"Reservoirs and fluxes","title":"Reservoirs and fluxes","text":"The Reaction code (file examples/reservoirs/reactions_ex3.jl) now produces an output_flux, and has been generalized to operate on a generic input_particle Reservoir:","category":"page"},{"location":"collated_examples/reservoirs/README/","page":"Reservoirs and fluxes","title":"Reservoirs and fluxes","text":"import Markdown\nMarkdown.parse(\n    \"\"\"```julia\n    $(read(joinpath(ENV[\"PALEO_EXAMPLES\"], \"reservoirs/reactions_ex3.jl\"), String))\n    ```\"\"\"\n)","category":"page"},{"location":"collated_examples/reservoirs/README/#yaml-configuration-file-3","page":"Reservoirs and fluxes","title":"yaml configuration file","text":"","category":"section"},{"location":"collated_examples/reservoirs/README/","page":"Reservoirs and fluxes","title":"Reservoirs and fluxes","text":"The model configuration (file examples/reservoirs/config_ex3.yaml) contains two Reservoirs A and B, and additional configuration for ReactionExample3 to rename the generic input_particle to link to Reservoir A and output_flux to link to Reservoir B:","category":"page"},{"location":"collated_examples/reservoirs/README/","page":"Reservoirs and fluxes","title":"Reservoirs and fluxes","text":"import Markdown\nMarkdown.parse(\n    \"\"\"```julia\n    $(read(joinpath(ENV[\"PALEO_EXAMPLES\"], \"reservoirs/config_ex3.yaml\"), String))\n    ```\"\"\"\n)","category":"page"},{"location":"collated_examples/reservoirs/README/#Run-script-3","page":"Reservoirs and fluxes","title":"Run script","text":"","category":"section"},{"location":"collated_examples/reservoirs/README/","page":"Reservoirs and fluxes","title":"Reservoirs and fluxes","text":"The script to run the model (file examples/reservoirs/run_ex3.jl) contains:","category":"page"},{"location":"collated_examples/reservoirs/README/","page":"Reservoirs and fluxes","title":"Reservoirs and fluxes","text":"import Markdown\nMarkdown.parse(\n    \"\"\"```julia\n    $(read(joinpath(ENV[\"PALEO_EXAMPLES\"], \"reservoirs/run_ex3.jl\"), String))\n    ```\"\"\"\n)","category":"page"},{"location":"collated_examples/reservoirs/README/","page":"Reservoirs and fluxes","title":"Reservoirs and fluxes","text":"and produces output showing the transfer between two Reservoirs:","category":"page"},{"location":"collated_examples/reservoirs/README/","page":"Reservoirs and fluxes","title":"Reservoirs and fluxes","text":"include(joinpath(ENV[\"PALEO_EXAMPLES\"], \"reservoirs/run_ex3.jl\")) # hide\nplot(paleorun.output, [\"global.A\", \"global.B\"]; ylabel=\"reservoir (mol)\") # hide\nsavefig(\"ex3_plot1.svg\")  # hide\nplot(paleorun.output, \"global.decay_flux\")  # hide\nsavefig(\"ex3_plot2.svg\"); nothing # hide","category":"page"},{"location":"collated_examples/reservoirs/README/","page":"Reservoirs and fluxes","title":"Reservoirs and fluxes","text":"(Image: ) (Image: )","category":"page"},{"location":"collated_examples/reservoirs/README/#Displaying-model-structure-and-variables-3","page":"Reservoirs and fluxes","title":"Displaying model structure and variables","text":"","category":"section"},{"location":"collated_examples/reservoirs/README/","page":"Reservoirs and fluxes","title":"Reservoirs and fluxes","text":"All metadata for model variables can be displayed with PB.show_variables:","category":"page"},{"location":"collated_examples/reservoirs/README/","page":"Reservoirs and fluxes","title":"Reservoirs and fluxes","text":"show(PB.show_variables(model), allcols=true, allrows=true) # display in REPL\n# vscodedisplay(PB.show_variables(model)) # more convenient when using VS code","category":"page"},{"location":"collated_examples/reservoirs/README/","page":"Reservoirs and fluxes","title":"Reservoirs and fluxes","text":"We now have additional Variables corresponding to the B reservoir.","category":"page"},{"location":"collated_examples/reservoirs/README/#Example-4-Transfer-between-Domains","page":"Reservoirs and fluxes","title":"Example 4 Transfer between Domains","text":"","category":"section"},{"location":"collated_examples/reservoirs/README/","page":"Reservoirs and fluxes","title":"Reservoirs and fluxes","text":"The ReactionExample3 from the previous example can be reused in a different model configuration that includes flux transfer between Reservoirs in two Domains. ","category":"page"},{"location":"collated_examples/reservoirs/README/#Additional-code-files-4","page":"Reservoirs and fluxes","title":"Additional code files","text":"","category":"section"},{"location":"collated_examples/reservoirs/README/","page":"Reservoirs and fluxes","title":"Reservoirs and fluxes","text":"This example reuses the PALEO reactions from Example 3 Transfer between two Reservoirs","category":"page"},{"location":"collated_examples/reservoirs/README/#yaml-configuration-file-4","page":"Reservoirs and fluxes","title":"yaml configuration file","text":"","category":"section"},{"location":"collated_examples/reservoirs/README/","page":"Reservoirs and fluxes","title":"Reservoirs and fluxes","text":"The model configuration (file examples/reservoirs/config_ex4.yaml) contains two Domains Box1 and Box2, and a flux coupler Domain fluxBoxes.  The ReactionSum in the global Domain tracks conservation:","category":"page"},{"location":"collated_examples/reservoirs/README/","page":"Reservoirs and fluxes","title":"Reservoirs and fluxes","text":"import Markdown\nMarkdown.parse(\n    \"\"\"```julia\n    $(read(joinpath(ENV[\"PALEO_EXAMPLES\"], \"reservoirs/config_ex4.yaml\"), String))\n    ```\"\"\"\n)","category":"page"},{"location":"collated_examples/reservoirs/README/#Run-script-4","page":"Reservoirs and fluxes","title":"Run script","text":"","category":"section"},{"location":"collated_examples/reservoirs/README/","page":"Reservoirs and fluxes","title":"Reservoirs and fluxes","text":"The script to run the model (file examples/reservoirs/run_ex4.jl) contains:","category":"page"},{"location":"collated_examples/reservoirs/README/","page":"Reservoirs and fluxes","title":"Reservoirs and fluxes","text":"import Markdown\nMarkdown.parse(\n    \"\"\"```julia\n    $(read(joinpath(ENV[\"PALEO_EXAMPLES\"], \"reservoirs/run_ex4.jl\"), String))\n    ```\"\"\"\n)","category":"page"},{"location":"collated_examples/reservoirs/README/","page":"Reservoirs and fluxes","title":"Reservoirs and fluxes","text":"and produces output showing the transfer between two Reservoirs in different Domains via the fluxBoxes flux coupler:","category":"page"},{"location":"collated_examples/reservoirs/README/","page":"Reservoirs and fluxes","title":"Reservoirs and fluxes","text":"include(joinpath(ENV[\"PALEO_EXAMPLES\"], \"reservoirs/run_ex4.jl\")) # hide\nplot(paleorun.output,  [\"Box1.A\", \"Box2.B\", \"global.E_total\"]; ylabel=\"reservoir (mol)\") # hide\nsavefig(\"ex4_plot1.svg\")  # hide\nplot(paleorun.output, [\"Box1.decay_flux\", \"fluxBoxes.flux_B\"]; ylabel=\"flux (mol yr-1)\")  # hide\nsavefig(\"ex4_plot2.svg\"); nothing # hide","category":"page"},{"location":"collated_examples/reservoirs/README/","page":"Reservoirs and fluxes","title":"Reservoirs and fluxes","text":"(Image: ) (Image: )","category":"page"},{"location":"collated_examples/reservoirs/README/#Displaying-model-structure-and-variables-4","page":"Reservoirs and fluxes","title":"Displaying model structure and variables","text":"","category":"section"},{"location":"collated_examples/reservoirs/README/","page":"Reservoirs and fluxes","title":"Reservoirs and fluxes","text":"All metadata for model variables can be displayed with PB.show_variables:","category":"page"},{"location":"collated_examples/reservoirs/README/","page":"Reservoirs and fluxes","title":"Reservoirs and fluxes","text":"show(PB.show_variables(model), allcols=true, allrows=true) # display in REPL\n# vscodedisplay(PB.show_variables(model)) # more convenient when using VS code","category":"page"},{"location":"collated_examples/reservoirs/README/","page":"Reservoirs and fluxes","title":"Reservoirs and fluxes","text":"This shows that we now have four Domains:","category":"page"},{"location":"collated_examples/reservoirs/README/","page":"Reservoirs and fluxes","title":"Reservoirs and fluxes","text":"Box1 containing reservoir_A, Adecay, and associated Variables\nBox2 containing reservoir_Band associated Variables\nfluxBoxes containing a Variable flux_B created by the ReactionFluxTarget\nglobal containing E_total to check conservation.","category":"page"},{"location":"collated_examples/reservoirs/README/#An-aside-on-ordering-of-ReactionMethods","page":"Reservoirs and fluxes","title":"An aside on ordering of ReactionMethods","text":"","category":"section"},{"location":"collated_examples/reservoirs/README/","page":"Reservoirs and fluxes","title":"Reservoirs and fluxes","text":"info: Info\nIt is rarely necessary or useful to look at this - shown here just to illustrate how PALEO works","category":"page"},{"location":"collated_examples/reservoirs/README/","page":"Reservoirs and fluxes","title":"Reservoirs and fluxes","text":"PALEO orders ReactionMethods based on the dependency information defined by the linked Variables (a method defining a Property must run before all methods that link to it as Dependencies, a method defining a Target must run after all methods that link to it as Contributors).","category":"page"},{"location":"collated_examples/reservoirs/README/","page":"Reservoirs and fluxes","title":"Reservoirs and fluxes","text":"The order in which ReactionMethods are called during each timestep is stored in model.sorted_methods_do (a struct PB.MethodSort) and can be displayed using:","category":"page"},{"location":"collated_examples/reservoirs/README/","page":"Reservoirs and fluxes","title":"Reservoirs and fluxes","text":"model.sorted_methods_do","category":"page"},{"location":"collated_examples/reservoirs/README/","page":"Reservoirs and fluxes","title":"Reservoirs and fluxes","text":"Each group of methods has no internal dependencies, but depends on methods in previous groups.  Here there is only one dependency, method Box2.transfer_fluxBoxes.do_transfer must run after the decay flux is calculated by Box1.reservoir_A.do_reactionreservoirscalar.","category":"page"},{"location":"collated_examples/reservoirs/README/#Example-5-Isotopes-and-Rayleigh-fractionation","page":"Reservoirs and fluxes","title":"Example 5 Isotopes and Rayleigh fractionation","text":"","category":"section"},{"location":"collated_examples/reservoirs/README/","page":"Reservoirs and fluxes","title":"Reservoirs and fluxes","text":"PALEO Variables can represent isotopes by setting the :field_data Attribute. Currently IsotopeLinear is supported, which represents a linearized approximation to a single isotope using two components total and total x delta.  Standard arithmetic (additon/subtraction, multiplication by a scalar) is supported.","category":"page"},{"location":"collated_examples/reservoirs/README/#Additional-code-files-5","page":"Reservoirs and fluxes","title":"Additional code files","text":"","category":"section"},{"location":"collated_examples/reservoirs/README/","page":"Reservoirs and fluxes","title":"Reservoirs and fluxes","text":"The Reaction code (file examples/reservoirs/reactions_ex5.jl) now requires additional Parameters field_data to set the data type, and Delta to set the fractionation assumed to occur during the decay/transfer. ","category":"page"},{"location":"collated_examples/reservoirs/README/","page":"Reservoirs and fluxes","title":"Reservoirs and fluxes","text":"import Markdown\nMarkdown.parse(\n    \"\"\"```julia\n    $(read(joinpath(ENV[\"PALEO_EXAMPLES\"], \"reservoirs/reactions_ex5.jl\"), String))\n    ```\"\"\"\n)","category":"page"},{"location":"collated_examples/reservoirs/README/#yaml-configuration-file-5","page":"Reservoirs and fluxes","title":"yaml configuration file","text":"","category":"section"},{"location":"collated_examples/reservoirs/README/","page":"Reservoirs and fluxes","title":"Reservoirs and fluxes","text":"The model configuration (file examples/reservoirs/config_ex5.yaml) contains a global parameter EIsotope used to set the isotope Type for all Reactions affecting the hypothetical element E.","category":"page"},{"location":"collated_examples/reservoirs/README/","page":"Reservoirs and fluxes","title":"Reservoirs and fluxes","text":"import Markdown\nMarkdown.parse(\n    \"\"\"```julia\n    $(read(joinpath(ENV[\"PALEO_EXAMPLES\"], \"reservoirs/config_ex5.yaml\"), String))\n    ```\"\"\"\n)","category":"page"},{"location":"collated_examples/reservoirs/README/#Run-script-5","page":"Reservoirs and fluxes","title":"Run script","text":"","category":"section"},{"location":"collated_examples/reservoirs/README/","page":"Reservoirs and fluxes","title":"Reservoirs and fluxes","text":"The script to run the model (file examples/reservoirs/run_ex5.jl) contains:","category":"page"},{"location":"collated_examples/reservoirs/README/","page":"Reservoirs and fluxes","title":"Reservoirs and fluxes","text":"import Markdown\nMarkdown.parse(\n    \"\"\"```julia\n    $(read(joinpath(ENV[\"PALEO_EXAMPLES\"], \"reservoirs/run_ex5.jl\"), String))\n    ```\"\"\"\n)","category":"page"},{"location":"collated_examples/reservoirs/README/","page":"Reservoirs and fluxes","title":"Reservoirs and fluxes","text":"and produces output showing Rayleigh fractionation:","category":"page"},{"location":"collated_examples/reservoirs/README/","page":"Reservoirs and fluxes","title":"Reservoirs and fluxes","text":"include(joinpath(ENV[\"PALEO_EXAMPLES\"], \"reservoirs/run_ex5.jl\")) # hide\nplot(paleorun.output,  [\"Box1.A\", \"Box2.B\", \"global.E_total\"]; ylabel=\"reservoir (mol)\") # hide\nsavefig(\"ex5_plot1.svg\")  # hide\nplot(paleorun.output, [\"Box1.decay_flux\", \"fluxBoxes.flux_B\"]; ylabel=\"flux (mol yr-1)\")  # hide\nsavefig(\"ex5_plot2.svg\"); nothing # hide\nplot(paleorun.output, [\"Box1.A_delta\", \"Box1.decay_flux.v_delta\", \"Box2.B_delta\", \"global.E_total.v_delta\", ]; ylabel=\"delta (per mil)\") # hide\nsavefig(\"ex5_plot3.svg\"); nothing # hide","category":"page"},{"location":"collated_examples/reservoirs/README/","page":"Reservoirs and fluxes","title":"Reservoirs and fluxes","text":"(Image: ) (Image: ) (Image: )","category":"page"},{"location":"collated_examples/reservoirs/README/#Displaying-model-structure-and-variables-5","page":"Reservoirs and fluxes","title":"Displaying model structure and variables","text":"","category":"section"},{"location":"collated_examples/reservoirs/README/","page":"Reservoirs and fluxes","title":"Reservoirs and fluxes","text":"All metadata for model variables can be displayed with PB.show_variables:","category":"page"},{"location":"collated_examples/reservoirs/README/","page":"Reservoirs and fluxes","title":"Reservoirs and fluxes","text":"show(PB.show_variables(model), allcols=true, allrows=true) # display in REPL\n# vscodedisplay(PB.show_variables(model)) # more convenient when using VS code","category":"page"},{"location":"collated_examples/reservoirs/README/","page":"Reservoirs and fluxes","title":"Reservoirs and fluxes","text":"The variable names are as in Example 4 Transfer between Domains, however field_data is now IsotopeLinear and not ScalarData for the reservoir and flux variables.","category":"page"},{"location":"collated_examples/solvers/README/#ODE-solvers","page":"ODE solvers","title":"ODE solvers","text":"","category":"section"},{"location":"collated_examples/solvers/README/","page":"ODE solvers","title":"ODE solvers","text":"These examples use of different ODE solvers for Example 5 Isotopes and Rayleigh fractionation","category":"page"},{"location":"collated_examples/solvers/README/#Naive-first-order-explicit-Euler-'by-hand'","page":"ODE solvers","title":"Naive first-order explicit Euler 'by hand'","text":"","category":"section"},{"location":"collated_examples/solvers/README/","page":"ODE solvers","title":"ODE solvers","text":"This example demonstrates a naive approach using first-order explicit Euler to integrate the two state variables Box1.A and Box2.B forward in time, using a fixed timestep of 0.5 yr.  This can be useful for testing, but for convenience and accuracy for practical use, it is usually better to use the PALEOmodel wrappers for the Julia SciML solvers, see https://paleotoolkit.github.io/PALEOmodel.jl/stable/PALEOmodelSolvers/.","category":"page"},{"location":"collated_examples/solvers/README/","page":"ODE solvers","title":"ODE solvers","text":"warning: Warning\nThis is NOT recommended except for testing - use the PALEOmodel wrappers for the solvers from the Julia SciML ecosystem, as described below.","category":"page"},{"location":"collated_examples/solvers/README/","page":"ODE solvers","title":"ODE solvers","text":"The script to run the model (file examples/reservoirs/run_ex5.yaml) contains:","category":"page"},{"location":"collated_examples/solvers/README/","page":"ODE solvers","title":"ODE solvers","text":"import Markdown\nMarkdown.parse(\n    \"\"\"```julia\n    $(read(joinpath(ENV[\"PALEO_EXAMPLES\"], \"solvers/run_ex5_naive_euler.jl\"), String))\n    ```\"\"\"\n)","category":"page"},{"location":"collated_examples/solvers/README/","page":"ODE solvers","title":"ODE solvers","text":"And produces output (solid lines, dashed lines show accurate output from CVODE solver):","category":"page"},{"location":"collated_examples/solvers/README/","page":"ODE solvers","title":"ODE solvers","text":"include(joinpath(ENV[\"PALEO_EXAMPLES\"], \"reservoirs/run_ex5.jl\"))\noutput_cvode = paleorun.output\ninclude(joinpath(ENV[\"PALEO_EXAMPLES\"], \"solvers/run_ex5_naive_euler.jl\"))","category":"page"},{"location":"collated_examples/solvers/README/","page":"ODE solvers","title":"ODE solvers","text":"plot(output_euler,  [\"Box1.A\", \"Box2.B\", \"global.E_total\"]; ylabel=\"reservoir (mol)\") # hide\nplot!(output_cvode,  [\"Box1.A\", \"Box2.B\", \"global.E_total\"]; ylabel=\"reservoir (mol)\", linestyle=:dash) # hide\nsavefig(\"ex5_naive_euler_plot1.svg\")  # hide\nplot(output_euler, [\"Box1.decay_flux\", \"fluxBoxes.flux_B\"]; ylabel=\"flux (mol yr-1)\")  # hide\nplot!(output_cvode, [\"Box1.decay_flux\", \"fluxBoxes.flux_B\"]; ylabel=\"flux (mol yr-1)\", linestyle=:dash)  # hide\nsavefig(\"ex5_naive_euler_plot2.svg\"); nothing # hide\nplot(output_euler, [\"Box1.A_delta\", \"Box1.decay_flux.v_delta\", \"Box2.B_delta\", \"global.E_total.v_delta\", ]; ylabel=\"delta (per mil)\") # hide\nplot!(output_cvode, [\"Box1.A_delta\", \"Box1.decay_flux.v_delta\", \"Box2.B_delta\", \"global.E_total.v_delta\", ]; ylabel=\"delta (per mil)\", linestyle=:dash) # hide\nsavefig(\"ex5_naive_euler_plot3.svg\"); nothing # hide","category":"page"},{"location":"collated_examples/solvers/README/","page":"ODE solvers","title":"ODE solvers","text":"(Image: ) (Image: ) (Image: )","category":"page"},{"location":"collated_examples/solvers/README/","page":"ODE solvers","title":"ODE solvers","text":"Note that although isotope mass balance is maintained, and the final state for B is correct, the Rayleigh fractionation of A is inaccurate due to the coarse timestep and inaccuracy of the first-order explicit Euler method.","category":"page"},{"location":"collated_examples/solvers/README/#PALEOmodel-default-SUNDIALS-CVODE-solver","page":"ODE solvers","title":"PALEOmodel default SUNDIALS CVODE solver","text":"","category":"section"},{"location":"collated_examples/solvers/README/","page":"ODE solvers","title":"ODE solvers","text":"This repeats Example 5 Isotopes and Rayleigh fractionation, which uses the PALEOmodel.ODE.integrate wrapper function for the solvers in the Julia SciML ecosystem. The PALEOmodel default solver (set by the alg argument) is SUNDIALS CVODE. This is a stiff solver that requires a Jacobian, either (as here) calculated using finite differences or passed explicitly, where PALEOmodel includes options to calculate a sparse Jacobian using automatic differentiation.","category":"page"},{"location":"collated_examples/solvers/README/","page":"ODE solvers","title":"ODE solvers","text":"Options solvekwargs are passed through to the SciML solve method, see https://diffeq.sciml.ai/dev/basics/common_solver_opts/.","category":"page"},{"location":"collated_examples/solvers/README/","page":"ODE solvers","title":"ODE solvers","text":"The script to run the model (file examples/reservoirs/run_ex5.jl) contains:","category":"page"},{"location":"collated_examples/solvers/README/","page":"ODE solvers","title":"ODE solvers","text":"import Markdown\nMarkdown.parse(\n    \"\"\"```julia\n    $(read(joinpath(ENV[\"PALEO_EXAMPLES\"], \"reservoirs/run_ex5.jl\"), String))\n    ```\"\"\"\n)","category":"page"},{"location":"collated_examples/solvers/README/","page":"ODE solvers","title":"ODE solvers","text":"and produces output showing Rayleigh fractionation:","category":"page"},{"location":"collated_examples/solvers/README/","page":"ODE solvers","title":"ODE solvers","text":"plot(output_cvode,  [\"Box1.A\", \"Box2.B\", \"global.E_total\"]; ylabel=\"reservoir (mol)\") # hide\nsavefig(\"ex5_plot1.svg\")  # hide\nplot(output_cvode, [\"Box1.decay_flux\", \"fluxBoxes.flux_B\"]; ylabel=\"flux (mol yr-1)\")  # hide\nsavefig(\"ex5_plot2.svg\"); nothing # hide\nplot(output_cvode, [\"Box1.A_delta\", \"Box1.decay_flux.v_delta\", \"Box2.B_delta\", \"global.E_total.v_delta\", ]; ylabel=\"delta (per mil)\") # hide\nsavefig(\"ex5_plot3.svg\"); nothing # hide","category":"page"},{"location":"collated_examples/solvers/README/","page":"ODE solvers","title":"ODE solvers","text":"(Image: ) (Image: ) (Image: )","category":"page"},{"location":"collated_examples/solvers/README/#Using-a-non-default-solver","page":"ODE solvers","title":"Using a non-default solver","text":"","category":"section"},{"location":"collated_examples/solvers/README/","page":"ODE solvers","title":"ODE solvers","text":"Recommended SciML solvers are documented at https://diffeq.sciml.ai/stable/. As this system is not stiff (no short timescales) the SciML Tsit5 solver is also a good choice, set using the alg argument to PALEOmodel.ODE.integrate (this is passed through to the SciML solve method).","category":"page"},{"location":"collated_examples/solvers/README/","page":"ODE solvers","title":"ODE solvers","text":"The script to run the model (file examples/reservoirs/run_ex5.yaml) with this solver contains:","category":"page"},{"location":"collated_examples/solvers/README/","page":"ODE solvers","title":"ODE solvers","text":"import Markdown\nMarkdown.parse(\n    \"\"\"```julia\n    $(read(joinpath(ENV[\"PALEO_EXAMPLES\"], \"solvers/run_ex5_Tsit5.jl\"), String))\n    ```\"\"\"\n)","category":"page"},{"location":"collated_examples/solvers/README/","page":"ODE solvers","title":"ODE solvers","text":"As expected the output using Tsit5 (solid lines) and CVODE_BDF (dashed lines) is indistinguishable as both solvers will maintain relative accuracy within the specified reltol=1e-5:","category":"page"},{"location":"collated_examples/solvers/README/","page":"ODE solvers","title":"ODE solvers","text":"include(joinpath(ENV[\"PALEO_EXAMPLES\"], \"solvers/run_ex5_Tsit5.jl\"))\noutput_tsit5 = paleorun.output","category":"page"},{"location":"collated_examples/solvers/README/","page":"ODE solvers","title":"ODE solvers","text":"plot(output_tsit5,  [\"Box1.A\", \"Box2.B\", \"global.E_total\"]; ylabel=\"reservoir (mol)\") # hide\nplot!(output_cvode,  [\"Box1.A\", \"Box2.B\", \"global.E_total\"]; ylabel=\"reservoir (mol)\", linestyle=:dash) # hide\nsavefig(\"ex5_tsit5_plot1.svg\")  # hide\nplot(output_tsit5, [\"Box1.decay_flux\", \"fluxBoxes.flux_B\"]; ylabel=\"flux (mol yr-1)\")  # hide\nplot!(output_cvode, [\"Box1.decay_flux\", \"fluxBoxes.flux_B\"]; ylabel=\"flux (mol yr-1)\", linestyle=:dash)  # hide\nsavefig(\"ex5_tsit5_plot2.svg\"); nothing # hide\nplot(output_tsit5, [\"Box1.A_delta\", \"Box1.decay_flux.v_delta\", \"Box2.B_delta\", \"global.E_total.v_delta\", ]; ylabel=\"delta (per mil)\") # hide\nplot!(output_cvode, [\"Box1.A_delta\", \"Box1.decay_flux.v_delta\", \"Box2.B_delta\", \"global.E_total.v_delta\", ]; ylabel=\"delta (per mil)\", linestyle=:dash) # hide\nsavefig(\"ex5_tsit5_plot3.svg\"); nothing # hide","category":"page"},{"location":"collated_examples/solvers/README/","page":"ODE solvers","title":"ODE solvers","text":"(Image: ) (Image: ) (Image: )","category":"page"},{"location":"collated_examples/CPU/README/#CPU-(Carbon,-Phosphorus,-Uranium)-model","page":"CPU (Carbon, Phosphorus, Uranium) model","title":"CPU (Carbon, Phosphorus, Uranium) model","text":"","category":"section"},{"location":"collated_examples/CPU/README/","page":"CPU (Carbon, Phosphorus, Uranium) model","title":"CPU (Carbon, Phosphorus, Uranium) model","text":"These examples demonstrate the CPU model ((Clarkson et al., 2018)) using a minimal single-box implementation in PALEO with parameter values from ((Zhang et al., 2020)).","category":"page"},{"location":"collated_examples/CPU/README/#Setting-the-Julia-environment-and-working-directory","page":"CPU (Carbon, Phosphorus, Uranium) model","title":"Setting the Julia environment and working directory","text":"","category":"section"},{"location":"collated_examples/CPU/README/","page":"CPU (Carbon, Phosphorus, Uranium) model","title":"CPU (Carbon, Phosphorus, Uranium) model","text":"Change the Julia REPL working directory to the PALEOtutorials/examples/CPU folder:","category":"page"},{"location":"collated_examples/CPU/README/","page":"CPU (Carbon, Phosphorus, Uranium) model","title":"CPU (Carbon, Phosphorus, Uranium) model","text":"In VS code, right click on this folder in the file browser and select Julia: Change to This Directory. Or from the REPL, use the cd command):","category":"page"},{"location":"collated_examples/CPU/README/","page":"CPU (Carbon, Phosphorus, Uranium) model","title":"CPU (Carbon, Phosphorus, Uranium) model","text":"julia> cd(\"PALEOtutorials/examples/CPU\")","category":"page"},{"location":"collated_examples/CPU/README/","page":"CPU (Carbon, Phosphorus, Uranium) model","title":"CPU (Carbon, Phosphorus, Uranium) model","text":"If it is not already active, activate the Julia environment PALEOtutorials/examples:","category":"page"},{"location":"collated_examples/CPU/README/","page":"CPU (Carbon, Phosphorus, Uranium) model","title":"CPU (Carbon, Phosphorus, Uranium) model","text":"In VS code, right click on PALEOtutorials/examples or any subfolder in the file browser and select Julia: Activate Parent Environment. Or from the REPL, use ] to enter package management:","category":"page"},{"location":"collated_examples/CPU/README/","page":"CPU (Carbon, Phosphorus, Uranium) model","title":"CPU (Carbon, Phosphorus, Uranium) model","text":"julia> pwd()\n\"/home/sd336/software/julia/PALEOtutorials/examples/CPU\"\njulia> ] \n(@v1.7) pkg> activate ../\n  Activating project at `/home/sd336/software/julia/PALEOtutorials/examples`","category":"page"},{"location":"collated_examples/CPU/README/#To-run-the-CPU-example-with-a-default-3e18-mol-C-perturbation","page":"CPU (Carbon, Phosphorus, Uranium) model","title":"To run the CPU example with a default 3e18 mol C perturbation","text":"","category":"section"},{"location":"collated_examples/CPU/README/","page":"CPU (Carbon, Phosphorus, Uranium) model","title":"CPU (Carbon, Phosphorus, Uranium) model","text":"julia> include(\"CPU_examples.jl\")","category":"page"},{"location":"collated_examples/CPU/README/","page":"CPU (Carbon, Phosphorus, Uranium) model","title":"CPU (Carbon, Phosphorus, Uranium) model","text":"This will run and plot output (NB: the first run will be slow as Julia JIT compiles the code).","category":"page"},{"location":"collated_examples/CPU/README/#To-display-model-Parameters,-Variables,-and-output.","page":"CPU (Carbon, Phosphorus, Uranium) model","title":"To display model Parameters, Variables, and output.","text":"","category":"section"},{"location":"collated_examples/CPU/README/","page":"CPU (Carbon, Phosphorus, Uranium) model","title":"CPU (Carbon, Phosphorus, Uranium) model","text":"See Displaying model configuration and output from the Julia REPL ","category":"page"},{"location":"#PALEOtutorials.jl-documentation","page":"PALEOtutorials.jl documentation","title":"PALEOtutorials.jl documentation","text":"","category":"section"},{"location":"","page":"PALEOtutorials.jl documentation","title":"PALEOtutorials.jl documentation","text":"Introduction and tutorials for the PALEOtoolkit framework.  This repository includes minimal examples and small models that demonstrate Julia workflows and how to use the framework to construct and use models. ","category":"page"},{"location":"","page":"PALEOtutorials.jl documentation","title":"PALEOtutorials.jl documentation","text":"See PALEOtoolkit components and workflow for a summary of PALEOtoolkit structure. For further information on PALEOtoolkit components see https://github.com/PALEOtoolkit","category":"page"},{"location":"","page":"PALEOtutorials.jl documentation","title":"PALEOtutorials.jl documentation","text":"For installation guide see Installation and getting started","category":"page"}]
}
